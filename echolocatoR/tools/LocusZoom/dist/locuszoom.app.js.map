{"version":3,"sources":["LocusZoom.js","Layouts.js","DataLayer.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Singletons.js","Dashboard.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["LocusZoom","version","populate","selector","datasource","layout","Error","d3","select","html","plot","call","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","forEach","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","populateAll","plots","selectAll","each","d","i","positionIntToString","pos","exp","suffix","exp_symbols","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","positionStringToInt","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","chrposoff","chrpos","match","center","offset","chr","start","end","position","prettyTicks","range","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","createCORSPromise","method","url","body","headers","timeout","response","Q","defer","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","resolve","reject","setTimeout","header","setRequestHeader","send","promise","validateState","new_state","validated_region","attempted_midpoint","attempted_scale","temp","min_region_scale","max_region_scale","parseFields","data","tokens","regex","m","text","index","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","getToolTipData","parentNode","classed","getToolTipDataLayer","getDataLayer","getToolTipPanel","data_layer","parent","getToolTipPlot","panel","generateCurtain","curtain","showing","content_selector","hide_delay","show","content","css","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","delay","remove","generateLoader","loader","progress_selector","cancel_selector","percent","padding","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","subclass","extra","Sub","constructor","apply","arguments","prototype","create","k","ext","LZ_SIG_THRESHOLD_LOGP","Layouts","obj","layouts","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","re","resolved_namespace","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","closable","or","and","covariates_model_association","orientation","fields","z_index","x_axis","field","y_axis","axis","ceiling","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","tooltip","l","fill_opacity","catalog","tooltip_positioning","category_field","lower_buffer","categories","null_value","spacing","lines","filters","operator","start_field","end_field","track_split_field","split_tracks","always_hide_legend","components","group_position","title","subtitle","covariates_model_plot_dashboard","button_html","button_title","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","dashboard","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","layer_name","default_config_display_name","options","display_name","display","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","_base_layout","state_id","setDefaultState","tooltips","global_statuses","addField","fieldName","transformations","fieldString","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","dataBCR","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","ScaleFunctions","_getDataExtent","axis_config","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","range_min","range_max","getTicks","config","createTooltip","positionTooltip","arrow","updateTooltip","destroyTooltip","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","filter","return_type","test","operators","a","b","matches","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","toggle","get_element_id_error","element_status_node_id","element_status_idx","splice","emit","active","status_ids","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrl","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","e","warn","jsonified","delimiter","record","draw","cliparea","reMap","lzd","getData","new_data","DataLayers","datalayers","datalayer","extend","parent_name","overrides","child","hit_area_width","render","self","trackData","visible_lines_group","enter","exit","hit_areas_group","hit_areas_selection","_getX","x_center","x_left","left_node","left_node_x_center","crds","arrow_type","arrow_top","arrow_left","arrow_width","stroke_width","tooltip_box","data_layer_height","data_layer_width","x_scale","y_center","offset_right","offset_left","top_offset","mouse","confidence_intervals","show_no_significance_line","border_radius","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","ci_height","duration","ease","points_selection","initial_y","fill","symbol","element_data","ci_config","axis_num","item","field_to_add","stroke","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","split","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","max_end","t","exons","gene","bboxes","boundary_fill","boundary_stroke","boundaries","labels","strand","exon_fill","exon_stroke","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","min_arrow_left","max_arrow_left","path","area","y0","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","x_range","y_range","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dax","abound","dal","label_lines","db","bbound","collision","separate_labels","seperate_iterations","alpha","again","sign","adjust","new_a_y","new_b_y","min_y","max_y","delta","label_elements","label_line","filtered_data","label_groups","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","colorParams","baseParams","parameters_categories_hash","every","colors","color_scale","scale","category10","category20","concat","categoryBounds","_categories","knownCategories","knownColors","xPos","diff","KnownDataSources","sources","findSourceByName","SOURCE_NAME","source","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","getTrans","fun","parseTrans","parseTransString","funs","result","substring","fn","ceil","toExponential","str","encodeURIComponent","s","functions","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","scrollbar_padding","menu_height_padding","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","generateBase64SVG","base64_string","css_string","stylesheet","styleSheets","fcall","outerHTML","dy","initial_html","style_def","insert_at","btoa","p1","String","fromCharCode","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","zoom_factor","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","dataLayerLayout","defaultConfig","configSlot","undefined","_selected_item","uniqueID","random","menuLayout","renderRow","display_options","row_id","radioId","field_name","defaultName","Legend","background_rect","elements","elements_group","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","validateBuildSource","class_name","build","DataSources","addSource","ns","dsobj","source_id","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","split_requests","requests","raw","trans","outnames","request_handles","when","discrete","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","normalizeResponse","N","sameLength","records","j","prepareData","annotateData","extractFields","fieldFound","output_record","v","combineChainBody","json","standardized","one_source_body","new_body","parseArraysToObjects","standard","parseObjectsToObjects","parseData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","exactMatch","arr","regexes","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","getRefvar","findExtremeValue","pval","extremeVal","extremeIdx","reqFields","refVar","columns","refSource","ldrefsource","leftJoin","lfield","rfield","position2","tagRefVariant","refvar","idfield","outrefname","outldname","corrField","rsquare","LDSource2","genome_build","ld_source","population","ld_pop","combined","chainRequests","payload","next","GwasCatalog","build_option","default_source","knownFields","posMatch","find","decider","decider_out","n_matches","outn","chainNames","catNames","GeneSource","GeneConstraintSource","geneids","substr","constraint_fields","RecombinationRateSource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","ConnectorSource","_source_name_mapping","specified_ids","REQUIRED_SOURCES","chain_source_id","applyPanelYIndexesToPanelLayouts","pid","remap_promises","window_onresize","event_hooks","hook","off","theseHooks","hookMatch","eventData","sourceID","hookToRun","eventContext","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","panel_layout","addPanel","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","corner_padding","corner_size","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","client_rect","subscribeToData","success_callback","opts","error_callback","onerror","err","listener","catch","state_changes","all","message","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","bubble","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","generateTicks","baseTickConfig","combinedTicks","acc","nextLayer","itemConfig","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately"],"mappings":"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","file":"locuszoom.app.js","sourcesContent":["/**\n * @namespace\n */\nvar LocusZoom = {\n    version: '0.9.0'\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == 'undefined') {\n        throw new Error('LocusZoom.populate selector not defined');\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html('');\n    var plot;\n    d3.select(selector).call(function() {\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == 'undefined') {\n            var iterator = 0;\n            while (!d3.select('#lz-' + iterator).empty()) { iterator++; }\n            this.attr('id', '#lz-' + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== 'undefined' && typeof this.node().dataset.region !== 'undefined') {\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key) {\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select('div#' + plot.id)\n            .append('svg')\n            .attr('version', '1.1')\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('id', plot.id + '_svg').attr('class', 'lz-locuszoom')\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == 'object' && Object.keys(datasource).length) {\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {Number} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix) {\n    var exp_symbols = { 0: '', 3: 'K', 6: 'M', 9: 'G' };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null) {\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = '' + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== 'undefined') {\n        ret += ' ' + exp_symbols[exp] + 'b';\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, '');\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1] === 'M') {\n            mult = 1e6;\n        } else if (suffix[1] === 'G') {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,'');\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === '+') {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count) {\n    if (typeof target_tick_count == 'undefined' || isNaN(parseInt(target_tick_count))) {\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n\n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2) {\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    var base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0) {\n        base_toFixed = Math.abs(Math.round(Math.log(base) / Math.LN10));\n    }\n\n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ) {\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ) {\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ) {\n                unit = 10 * base;\n            }\n        }\n    }\n\n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0] / unit) * unit).toFixed(base_toFixed) );\n    while (i < range[1]) {\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0) {\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == 'undefined' || ['low', 'high', 'both', 'neither'].indexOf(clip_range) === -1) {\n        clip_range = 'neither';\n    }\n    if (clip_range === 'low' || clip_range === 'both') {\n        if (ticks[0] < range[0]) { ticks = ticks.slice(1); }\n    }\n    if (clip_range === 'high' || clip_range === 'both') {\n        if (ticks[ticks.length - 1] > range[1]) { ticks.pop(); }\n    }\n\n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} [body] The request body to send to the server\n * @param {Object} [headers] Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    var response = Q.defer();\n    var xhr = new XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != 'undefined') {\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n    }\n    if (xhr) {\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0 ) {\n                    response.resolve(xhr.response);\n                } else {\n                    response.reject('HTTP ' + xhr.status + ' for ' + url);\n                }\n            }\n        };\n        timeout && setTimeout(response.reject, timeout);\n        body = typeof body !== 'undefined' ? body : '';\n        if (typeof headers !== 'undefined') {\n            for (var header in headers) {\n                xhr.setRequestHeader(header, headers[header]);\n            }\n        }\n        // Send the request\n        xhr.send(body);\n    }\n    return response.promise;\n};\n\n/**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom.validateState = function(new_state, layout) {\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != 'undefined' && typeof new_state.start != 'undefined' && typeof new_state.end != 'undefined') {\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)) {\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)) {\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0) {\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0) {\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != 'object') {\n        throw new Error('LocusZoom.parseFields invalid arguments: data is not an object');\n    }\n    if (typeof html != 'string') {\n        throw new Error('LocusZoom.parseFields invalid arguments: html is not a string');\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0) {\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = ''; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === '#if ') { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === '/if') { tokens.push({close: 'if'}); html = html.slice(m[0].length); }\n        else {\n            console.error('Error tokenizing tooltip when remaining template is ' + JSON.stringify(html) +\n                          ' and previous tokens are ' + JSON.stringify(tokens) +\n                          ' and current regex match is ' + JSON.stringify([m[1], m[2], m[3]]));\n            html = html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== 'undefined' || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === 'if') { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error('Error making tooltip AST due to unknown token ' + JSON.stringify(token));\n            return { text: '' };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) {\n        ast.push(astify());\n    }\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== 'undefined') {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if (['string','number','boolean'].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return ''; }\n            } catch (error) { console.error('Error while processing variable ' + JSON.stringify(node.variable)); }\n            return '{{' + node.variable + '}}';\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join('');\n                }\n            } catch (error) { console.error('Error while processing condition ' + JSON.stringify(node.variable)); }\n            return '';\n        } else { console.error('Error rendering tooltip due to unknown AST node ' + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join('');\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node) {\n    if (typeof node != 'object' || typeof node.parentNode == 'undefined') {\n        throw new Error('Invalid node object');\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed('lz-data_layer-tooltip') && typeof selector.data()[0] != 'undefined') {\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node) {\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer) { return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node) {\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer) { return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node) {\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel) { return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function() {\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css) {\n            if (!this.curtain.showing) {\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-curtain').attr('id', this.id + '.curtain');\n                this.curtain.content_selector = this.curtain.selector.append('div').attr('class', 'lz-curtain-content');\n                this.curtain.selector.append('div').attr('class', 'lz-curtain-dismiss').html('Dismiss')\n                    .on('click', function() {\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css) {\n            if (!this.curtain.showing) { return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == 'object') {\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + 'px',\n                left: page_origin.x + 'px',\n                width: this.layout.width + 'px',\n                height: this.layout.height + 'px'\n            });\n            this.curtain.content_selector.style({\n                'max-width': (this.layout.width - 40) + 'px',\n                'max-height': (this.layout.height - 40) + 'px'\n            });\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay) {\n            if (!this.curtain.showing) { return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function() {\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content) {\n            // Generate loader\n            if (!this.loader.showing) {\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-loader').attr('id', this.id + '.loader');\n                this.loader.content_selector = this.loader.selector.append('div')\n                    .attr('class', 'lz-loader-content');\n                this.loader.progress_selector = this.loader.selector\n                    .append('div').attr('class', 'lz-loader-progress-container')\n                    .append('div').attr('class', 'lz-loader-progress');\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == 'undefined') { content = 'Loading...'; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent) {\n            if (!this.loader.showing) { return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + 'px',\n                left: (page_origin.x + padding) + 'px'\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == 'number') {\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + '%'\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function() {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent) {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay) {\n            if (!this.loader.showing) { return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra) {\n    if (typeof parent !== 'function' ) {\n        throw new Error('Parent must be a callable constructor');\n    }\n\n    extra = extra || {};\n    var Sub = extra.hasOwnProperty('constructor') ? extra.constructor : function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    return Sub;\n};\n\n\n/**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\nLocusZoom.ext = {};\n","/* global LocusZoom */\n'use strict';\n\nvar LZ_SIG_THRESHOLD_LOGP = 7.301; // -log10(.05/1e6)\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function () {\n    var obj = {};\n    var layouts = {\n        'plot': {},\n        'panel': {},\n        'data_layer': {},\n        'dashboard': {},\n        'tooltip': {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function (type, name, modifications) {\n        if (typeof type != 'string' || typeof name != 'string') {\n            throw new Error('invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)');\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced) {\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = '';\n            if (typeof layout.namespace == 'string') {\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == 'object' && Object.keys(layout.namespace).length) {\n                if (typeof layout.namespace.default != 'undefined') {\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? ':' : '';\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function (element, namespace) {\n                if (namespace) {\n                    if (typeof namespace == 'string') {\n                        namespace = { default: namespace };\n                    }\n                } else {\n                    namespace = { default: '' };\n                }\n                if (typeof element == 'string') {\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null) {\n                        base = match[0];\n                        key = match[1].length ? match[1].replace(/(\\[|\\])/g, '') : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == 'object' && typeof namespace[key] != 'undefined') {\n                            resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace) {\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == 'object' && element != null) {\n                    if (typeof element.namespace != 'undefined') {\n                        var merge_namespace = (typeof element.namespace == 'string') ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === 'namespace') {\n                            continue;\n                        }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property) {\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw new Error('layout type [' + type + '] name [' + name + '] not found');\n        }\n    };\n\n    /** @private */\n    obj.set = function (type, name, layout) {\n        if (typeof type != 'string' || typeof name != 'string' || typeof layout != 'object') {\n            throw new Error('unable to set new layout; bad arguments passed to set()');\n        }\n        if (!layouts[type]) {\n            layouts[type] = {};\n        }\n        if (layout) {\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function (type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function (type) {\n        if (!layouts[type]) {\n            var list = {};\n            Object.keys(layouts).forEach(function (type) {\n                list[type] = Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns {object} The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n            throw new Error('LocusZoom.Layouts.merge only accepts two layout objects; ' + (typeof custom_layout) + ', ' + (typeof default_layout) + ' given');\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)) {\n                continue;\n            }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n                custom_type = 'array';\n            }\n            if (default_type === 'object' && Array.isArray(default_layout[property])) {\n                default_type = 'array';\n            }\n            // Unsupported property types: throw an exception\n            if (custom_type === 'function' || default_type === 'function') {\n                throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === 'undefined') {\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === 'object' && default_type === 'object') {\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\nLocusZoom.Layouts.add('tooltip', 'standard_association', {\n    namespace: { 'assoc': 'assoc' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[assoc]}}variant}}</strong><br>'\n        + 'P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>'\n        + 'Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>'\n        + '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\">Make LD Reference</a><br>'\n});\n\nLocusZoom.Layouts.add('tooltip', 'covariates_model_association', function () {\n    var covariates_model_association = LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true });\n    covariates_model_association.html += '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\">Condition on Variant</a><br>';\n    return covariates_model_association;\n}());\n\nLocusZoom.Layouts.add('tooltip', 'standard_genes', {\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<h4><strong><i>{{gene_name}}</i></strong></h4>'\n        + '<div style=\"float: left;\">Gene ID: <strong>{{gene_id}}</strong></div>'\n        + '<div style=\"float: right;\">Transcript ID: <strong>{{transcript_id}}</strong></div>'\n        + '<div style=\"clear: both;\"></div>'\n        + '<table>'\n        + '<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>'\n        + '<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>'\n        + '<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>'\n        + '<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>'\n        + '</table>'\n        + '<a href=\"http://exac.broadinstitute.org/gene/{{gene_id}}\" target=\"_new\">More data on ExAC</a>'\n});\n\nLocusZoom.Layouts.add('tooltip', 'standard_intervals', {\n    namespace: { 'intervals': 'intervals' },\n    closable: false,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}'\n});\n\nLocusZoom.Layouts.add('tooltip', 'catalog_variant', {\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[catalog]}}variant|htmlescape}}</strong><br>'\n        + 'Catalog entries: <strong>{{n_catalog_matches}}</strong><br>'\n        + 'Top Trait: <strong>{{{{namespace[catalog]}}trait|htmlescape}}</strong><br>'\n        + 'Top P Value: <strong>{{{{namespace[catalog]}}log_pvalue|logtoscinotation}}</strong><br>'\n        // User note: if a different catalog is used, the tooltip will need to be replaced with a different link URL\n        + 'More: <a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid}}\" target=\"_new\">GWAS catalog</a> / <a href=\"https://www.ncbi.nlm.nih.gov/snp/{{{{namespace[catalog]}}rsid}}\" target=\"_new\">dbSNP</a>'\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n */\n\nLocusZoom.Layouts.add('data_layer', 'significance', {\n    id: 'significance',\n    type: 'orthogonal_line',\n    orientation: 'horizontal',\n    offset: LZ_SIG_THRESHOLD_LOGP\n});\n\nLocusZoom.Layouts.add('data_layer', 'recomb_rate', {\n    namespace: { 'recomb': 'recomb' },\n    id: 'recombrate',\n    type: 'line',\n    fields: ['{{namespace[recomb]}}position', '{{namespace[recomb]}}recomb_rate'],\n    z_index: 1,\n    style: {\n        'stroke': '#0000FF',\n        'stroke-width': '1.5px'\n    },\n    x_axis: {\n        field: '{{namespace[recomb]}}position'\n    },\n    y_axis: {\n        axis: 2,\n        field: '{{namespace[recomb]}}recomb_rate',\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'association_pvalues', {\n    namespace: { 'assoc': 'assoc', 'ld': 'ld' },\n    id: 'associationpvalues',\n    type: 'scatter',\n    point_shape: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 'diamond',\n            else: 'circle'\n        }\n    },\n    point_size: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: 'if',\n            field: '{{namespace[ld]}}isrefvar',\n            parameters: {\n                field_value: 1,\n                then: '#9632b8'\n            }\n        },\n        {\n            scale_function: 'numerical_bin',\n            field: '{{namespace[ld]}}state',\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: ['#357ebd', '#46b8da', '#5cb85c', '#eea236', '#d43f3a']\n            }\n        },\n        '#B8B8B8'\n    ],\n    legend: [\n        { shape: 'diamond', color: '#9632b8', size: 40, label: 'LD Ref Var', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#d43f3a', size: 40, label: '1.0 > r² ≥ 0.8', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#eea236', size: 40, label: '0.8 > r² ≥ 0.6', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#5cb85c', size: 40, label: '0.6 > r² ≥ 0.4', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#46b8da', size: 40, label: '0.4 > r² ≥ 0.2', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#357ebd', size: 40, label: '0.2 > r² ≥ 0.0', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#B8B8B8', size: 40, label: 'no r² data', class: 'lz-data_layer-scatter' }\n    ],\n    label: null,\n    fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[assoc]}}log_pvalue|logtoscinotation', '{{namespace[assoc]}}ref_allele', '{{namespace[ld]}}state', '{{namespace[ld]}}isrefvar'],\n    id_field: '{{namespace[assoc]}}variant',\n    z_index: 2,\n    x_axis: {\n        field: '{{namespace[assoc]}}position'\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[assoc]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [0, 10]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'association_pvalues_catalog', function () {\n    // Slightly modify an existing layout\n    var l = LocusZoom.Layouts.get('data_layer', 'association_pvalues', {\n        unnamespaced: true,\n        id: 'associationpvaluescatalog',\n        fill_opacity: 0.7\n    });\n\n    l.tooltip.html += '{{#if {{namespace[catalog]}}rsid}}<br><a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid}}\" target=\"_new\">See hits in GWAS catalog</a>{{/if}}';\n    l.namespace.catalog = 'catalog';\n    l.fields.push('{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait', '{{namespace[catalog]}}log_pvalue');\n    return l;\n}());\n\nLocusZoom.Layouts.add('data_layer', 'phewas_pvalues', {\n    namespace: { 'phewas': 'phewas' },\n    id: 'phewaspvalues',\n    type: 'category_scatter',\n    point_shape: 'circle',\n    point_size: 70,\n    tooltip_positioning: 'vertical',\n    id_field: '{{namespace[phewas]}}id',\n    fields: ['{{namespace[phewas]}}id', '{{namespace[phewas]}}log_pvalue', '{{namespace[phewas]}}trait_group', '{{namespace[phewas]}}trait_label'],\n    x_axis: {\n        field: '{{namespace[phewas]}}x',  // Synthetic/derived field added by `category_scatter` layer\n        category_field: '{{namespace[phewas]}}trait_group',\n        lower_buffer: 0.025,\n        upper_buffer: 0.025\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[phewas]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: {\n        field: '{{namespace[phewas]}}trait_group',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: '#B8B8B8'\n        }\n    },\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: ['highlighted', 'selected'] },\n        hide: { and: ['unhighlighted', 'unselected'] },\n        html: [\n            '<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>',\n            '<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>',\n            '<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>'\n        ].join('')\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    label: {\n        text: '{{{{namespace[phewas]}}trait_label}}',\n        spacing: 6,\n        lines: {\n            style: {\n                'stroke-width': '2px',\n                'stroke': '#333333',\n                'stroke-dasharray': '2px 2px'\n            }\n        },\n        filters: [\n            {\n                field: '{{namespace[phewas]}}log_pvalue',\n                operator: '>=',\n                value: 20\n            }\n        ],\n        style: {\n            'font-size': '14px',\n            'font-weight': 'bold',\n            'fill': '#333333'\n        }\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'genes', {\n    namespace: { 'gene': 'gene', 'constraint': 'constraint' },\n    id: 'genes',\n    type: 'genes',\n    fields: ['{{namespace[gene]}}all', '{{namespace[constraint]}}all'],\n    id_field: 'gene_id',\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_genes', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'genome_legend', {\n    namespace: { 'genome': 'genome' },\n    id: 'genome_legend',\n    type: 'genome_legend',\n    fields: ['{{namespace[genome]}}chr', '{{namespace[genome]}}base_pairs'],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add('data_layer', 'intervals', {\n    namespace: { 'intervals': 'intervals' },\n    id: 'intervals',\n    type: 'intervals',\n    fields: ['{{namespace[intervals]}}start', '{{namespace[intervals]}}end', '{{namespace[intervals]}}state_id', '{{namespace[intervals]}}state_name'],\n    id_field: '{{namespace[intervals]}}start',\n    start_field: '{{namespace[intervals]}}start',\n    end_field: '{{namespace[intervals]}}end',\n    track_split_field: '{{namespace[intervals]}}state_id',\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: '{{namespace[intervals]}}state_id',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n            values: ['rgb(212,63,58)', 'rgb(250,120,105)', 'rgb(252,168,139)', 'rgb(240,189,66)', 'rgb(250,224,105)', 'rgb(240,238,84)', 'rgb(244,252,23)', 'rgb(23,232,252)', 'rgb(32,191,17)', 'rgb(23,166,77)', 'rgb(32,191,17)', 'rgb(162,133,166)', 'rgb(212,212,212)'],\n            null_value: '#B8B8B8'\n        }\n    },\n    legend: [\n        { shape: 'rect', color: 'rgb(212,63,58)', width: 9, label: 'Active Promoter', '{{namespace[intervals]}}state_id': 1 },\n        { shape: 'rect', color: 'rgb(250,120,105)', width: 9, label: 'Weak Promoter', '{{namespace[intervals]}}state_id': 2 },\n        { shape: 'rect', color: 'rgb(252,168,139)', width: 9, label: 'Poised Promoter', '{{namespace[intervals]}}state_id': 3 },\n        { shape: 'rect', color: 'rgb(240,189,66)', width: 9, label: 'Strong enhancer', '{{namespace[intervals]}}state_id': 4 },\n        { shape: 'rect', color: 'rgb(250,224,105)', width: 9, label: 'Strong enhancer', '{{namespace[intervals]}}state_id': 5 },\n        { shape: 'rect', color: 'rgb(240,238,84)', width: 9, label: 'Weak enhancer', '{{namespace[intervals]}}state_id': 6 },\n        { shape: 'rect', color: 'rgb(244,252,23)', width: 9, label: 'Weak enhancer', '{{namespace[intervals]}}state_id': 7 },\n        { shape: 'rect', color: 'rgb(23,232,252)', width: 9, label: 'Insulator', '{{namespace[intervals]}}state_id': 8 },\n        { shape: 'rect', color: 'rgb(32,191,17)', width: 9, label: 'Transcriptional transition', '{{namespace[intervals]}}state_id': 9 },\n        { shape: 'rect', color: 'rgb(23,166,77)', width: 9, label: 'Transcriptional elongation', '{{namespace[intervals]}}state_id': 10 },\n        { shape: 'rect', color: 'rgb(136,240,129)', width: 9, label: 'Weak transcribed', '{{namespace[intervals]}}state_id': 11 },\n        { shape: 'rect', color: 'rgb(162,133,166)', width: 9, label: 'Polycomb-repressed', '{{namespace[intervals]}}state_id': 12 },\n        { shape: 'rect', color: 'rgb(212,212,212)', width: 9, label: 'Heterochromatin / low signal', '{{namespace[intervals]}}state_id': 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_intervals', { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add('data_layer', 'annotation_catalog', {\n    // Identify GWAS hits that are present in the GWAS catalog\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    id: 'annotation_catalog',\n    type: 'annotation_track',\n    id_field: '{{namespace[catalog]}}variant',\n    x_axis: {\n        field: '{{namespace[assoc]}}position'\n    },\n    color: '#0000CC',\n    fields: [\n        '{{namespace[assoc]}}variant', '{{namespace[assoc]}}chromosome', '{{namespace[assoc]}}position',\n        '{{namespace[catalog]}}variant', '{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait', '{{namespace[catalog]}}log_pvalue'\n    ],\n    filters: [\n        // Specify which points to show on the track. Any selection must satisfy ALL filters\n        ['{{namespace[catalog]}}rsid', '!=', null],\n        ['{{namespace[catalog]}}log_pvalue', '>', LZ_SIG_THRESHOLD_LOGP]\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' }\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' }\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true }\n        ],\n        onshiftclick: [\n            { action: 'toggle', status: 'selected' }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get('tooltip', 'catalog_variant', { unnamespaced: true }),\n    tooltip_positioning: 'top'\n});\n\n/**\n * Dashboard Layouts: toolbar buttons etc\n * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add('dashboard', 'standard_panel', {\n    components: [\n        {\n            type: 'remove_panel',\n            position: 'right',\n            color: 'red',\n            group_position: 'end'\n        },\n        {\n            type: 'move_panel_up',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'move_panel_down',\n            position: 'right',\n            group_position: 'start',\n            style: { 'margin-left': '0.75em' }\n        }\n    ]\n});\n\nLocusZoom.Layouts.add('dashboard', 'standard_plot', {\n    components: [\n        {\n            type: 'title',\n            title: 'LocusZoom',\n            subtitle: '<a href=\"https://statgen.github.io/locuszoom/\" target=\"_blank\">v' + LocusZoom.version + '</a>',\n            position: 'left'\n        },\n        {\n            type: 'download',\n            position: 'right'\n        }\n    ]\n});\n\nLocusZoom.Layouts.add('dashboard', 'covariates_model_plot', function () {\n    var covariates_model_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true });\n    covariates_model_plot_dashboard.components.push({\n        type: 'covariates_model',\n        button_html: 'Model',\n        button_title: 'Show and edit covariates currently in model',\n        position: 'left'\n    });\n    return covariates_model_plot_dashboard;\n}());\n\nLocusZoom.Layouts.add('dashboard', 'region_nav_plot', function () {\n    var region_nav_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true });\n    region_nav_plot_dashboard.components.push(\n        {\n            type: 'shift_region',\n            step: 500000,\n            button_html: '>>',\n            position: 'right',\n            group_position: 'end'\n        }, {\n            type: 'shift_region',\n            step: 50000,\n            button_html: '>',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'zoom_region',\n            step: 0.2,\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'zoom_region',\n            step: -0.2,\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'shift_region',\n            step: -50000,\n            button_html: '<',\n            position: 'right',\n            group_position: 'middle'\n        },\n        {\n            type: 'shift_region',\n            step: -500000,\n            button_html: '<<',\n            position: 'right',\n            group_position: 'start'\n        }\n    );\n    return region_nav_plot_dashboard;\n}());\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add('panel', 'association', {\n    id: 'association',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'toggle_legend',\n            position: 'right'\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state'\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28\n        },\n        y2: {\n            label: 'Recombination Rate (cM/Mb)',\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: 'vertical',\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'recomb_rate', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'association_pvalues', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'association_catalog', function () {\n    var l = LocusZoom.Layouts.get('panel', 'association', {\n        unnamespaced: true,\n        id: 'associationcatalog',\n        namespace: { 'assoc': 'assoc', 'ld': 'ld', 'catalog': 'catalog' } // Required to resolve display options\n    });\n    l.dashboard.components.push({\n        type: 'display_options',\n        position: 'right',\n        color: 'blue',\n        // Below: special config specific to this widget\n        button_html: 'Display options...',\n        button_title: 'Control how plot items are displayed',\n\n        layer_name: 'associationpvaluescatalog',\n        default_config_display_name: 'No catalog labels (default)', // display name for the default plot color option (allow user to revert to plot defaults)\n\n        options: [\n            {\n                // First dropdown menu item\n                display_name: 'Label catalog traits',  // Human readable representation of field name\n                display: {  // Specify layout directives that control display of the plot for this option\n                    label: {\n                        text: '{{{{namespace[catalog]}}trait}}',\n                        spacing: 6,\n                        lines: {\n                            style: {\n                                'stroke-width': '2px',\n                                'stroke': '#333333',\n                                'stroke-dasharray': '2px 2px'\n                            }\n                        },\n                        filters: [\n                            // Only label points if they are significant for some trait in the catalog, AND in high LD\n                            //  with the top hit of interest\n                            {\n                                field: '{{namespace[catalog]}}trait',\n                                operator: '!=',\n                                value: null\n                            },\n                            {\n                                field: '{{namespace[catalog]}}log_pvalue',\n                                operator: '>',\n                                value: LZ_SIG_THRESHOLD_LOGP\n                            },\n                            {\n                                field: '{{namespace[ld]}}state',\n                                operator: '>',\n                                value: 0.4\n                            },\n                        ],\n                        style: {\n                            'font-size': '10px',\n                            'font-weight': 'bold',\n                            'fill': '#333333'\n                        }\n                    }\n                }\n            }\n        ]\n    });\n    l.data_layers = [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'recomb_rate', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'association_pvalues_catalog', { unnamespaced: true })\n    ];\n    return l;\n}());\n\nLocusZoom.Layouts.add('panel', 'genes', {\n    id: 'genes',\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'resize_to_data',\n            position: 'right'\n        });\n        return l;\n    })(),\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'genes', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'phewas', {\n    id: 'phewas',\n    width: 800,\n    height: 300,\n    min_width: 800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    'font-weight': 'bold',\n                    'font-size': '11px',\n                    'text-anchor': 'start'\n                },\n                transform: 'rotate(50)',\n                position: 'left'  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n        LocusZoom.Layouts.get('data_layer', 'phewas_pvalues', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'genome_legend', {\n    id: 'genome_legend',\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width: 800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: 'Genomic Position (number denotes chromosome)',\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: '1',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 370850307,\n                    text: '2',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 591461209,\n                    text: '3',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 786049562,\n                    text: '4',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 972084330,\n                    text: '5',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1148099493,\n                    text: '6',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1313226358,\n                    text: '7',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1465977701,\n                    text: '8',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1609766427,\n                    text: '9',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1748140516,\n                    text: '10',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 1883411148,\n                    text: '11',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2017840353,\n                    text: '12',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2142351240,\n                    text: '13',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2253610949,\n                    text: '14',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2358551415,\n                    text: '15',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2454994487,\n                    text: '16',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2540769469,\n                    text: '17',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2620405698,\n                    text: '18',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2689008813,\n                    text: '19',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2750086065,\n                    text: '20',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2805663772,\n                    text: '21',\n                    style: {\n                        'fill': 'rgb(120, 120, 186)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                },\n                {\n                    x: 2855381003,\n                    text: '22',\n                    style: {\n                        'fill': 'rgb(0, 0, 66)',\n                        'text-anchor': 'center',\n                        'font-size': '13px',\n                        'font-weight': 'bold'\n                    },\n                    transform: 'translate(0, 2)'\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'genome_legend', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'intervals', {\n    id: 'intervals',\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function () {\n        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n        l.components.push({\n            type: 'toggle_split_tracks',\n            data_layer_id: 'intervals',\n            position: 'right'\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: 'horizontal',\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'intervals', { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add('panel', 'annotation_catalog', {\n    id: 'annotationcatalog',\n    width: 800,\n    height: 50,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 25, right: 50, bottom: 0, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true }),\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get('data_layer', 'annotation_catalog', { unnamespaced: true })\n    ]\n});\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add('plot', 'standard_association', {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: 'both',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'association', { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\nLocusZoom.Layouts.add('plot', 'association_catalog', {\n    state: {},\n    width: 800,\n    height: 500,\n    responsive_resize: 'width_only',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'annotation_catalog', { unnamespaced: true }),\n        LocusZoom.Layouts.get('panel', 'association_catalog', { unnamespaced: true }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get('plot', 'standard_association');\n\nLocusZoom.Layouts.add('plot', 'standard_phewas', {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: 'both',\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'phewas', { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get('panel', 'genome_legend', { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get('panel', 'genes', {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: 'Chromosome {{chr}} (Mb)',\n                    label_offset: 32,\n                    tick_format: 'region',\n                    extent: 'state'\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add('plot', 'interval_association', {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: 'both',\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get('panel', 'association', { unnamespaced: true, width: 800, proportional_height: (225 / 570) }),\n        LocusZoom.Layouts.get('panel', 'intervals', { unnamespaced: true, proportional_height: (120 / 570) }),\n        LocusZoom.Layouts.get('panel', 'genes', { unnamespaced: true, width: 800, proportional_height: (225 / 570) })\n    ]\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != 'undefined' && parent instanceof LocusZoom.Panel) { this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id) { this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== 'number') { this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== 'number') { this.layout.y_axis.axis = 1; }\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    this.setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip) {\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        'highlighted': false,\n        'selected': false,\n        'faded': false,\n        'hidden': false\n    };\n\n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw new Error('Must specify field name and namespace to use when adding field');\n    }\n    var fieldString = namespace + ':' + fieldName;\n    if (transformations) {\n        fieldString += '|';\n        if (typeof transformations === 'string') {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join('|');\n        } else {\n            throw new Error('Must provide transformations as either a string or array of strings');\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype.setDefaultState = function() {\n    // Define state parameters specific to this data layer. Within plot state, this will live under a key\n    //  `panel_name.layer_name`.\n    if (this.parent) {\n        this.state = this.parent.state;\n        this.state_id = this.parent.id + '.' + this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n        LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status) {\n            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n        }.bind(this));\n    }\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: '',\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: ['highlight', 'select', 'fade', 'hide'],\n    adjectives: ['highlighted', 'selected', 'faded', 'hidden'],\n    menu_antiverbs: ['unhighlight', 'deselect', 'unfade', 'show']\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function() {\n    return this.parent_plot.id + '.' + this.parent.id + '.' + this.id;\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function() {\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function() {\n    if (!this.layout.transition) { return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element) {\n    var element_id = 'element';\n    if (typeof element == 'string') {\n        element_id = element;\n    } else if (typeof element == 'object') {\n        var id_field = this.layout.id_field || 'id';\n        if (typeof element[id_field] == 'undefined') {\n            throw new Error('Unable to generate element ID');\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,'');\n    }\n    return (this.getBaseId() + '-' + element_id).replace(/([:.[\\],])/g, '_');\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element) {\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id) {\n    var selector = d3.select('#' + id.replace(/([:.[\\],])/g, '\\\\$1')); // escape special characters\n    if (!selector.empty() && selector.data() && selector.data().length) {\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function() {\n    this.data.forEach(function(d, i) {\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n        this.data[i].toHTML = function() {\n            var id_field = this.layout.id_field || 'id';\n            var html = '';\n            if (this.data[i][id_field]) { html = this.data[i][id_field].toString(); }\n            return html;\n        }.bind(this);\n        // getDataLayer() method - return a reference to the data layer\n        this.data[i].getDataLayer = function() {\n            return this;\n        }.bind(this);\n        // deselect() method - shortcut method to deselect the element\n        this.data[i].deselect = function() {\n            var data_layer = this.getDataLayer();\n            data_layer.unselectElement(this);\n        };\n    }.bind(this));\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function() {\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function() {\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append('g')\n        .attr('class', 'lz-data_layer-container')\n        .attr('id', this.getBaseId() + '.data_layer_container');\n\n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append('clipPath')\n        .attr('id', this.getBaseId() + '.clip')\n        .append('rect');\n\n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append('g')\n        .attr('id', this.getBaseId() + '.data_layer')\n        .attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function() {\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]) {\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function() {\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]) {\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data) {\n    var ret = null;\n    if (Array.isArray(layout)) {\n        var idx = 0;\n        while (ret === null && idx < layout.length) {\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout) {\n        case 'number':\n        case 'string':\n            ret = layout;\n            break;\n        case 'object':\n            if (layout.scale_function) {\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n\n/**\n * Implementation hook for fetching the min and max values of available data. Used to determine axis range, if no other\n *   explicit axis settings override. Useful for data layers where the data extent depends on more than one field.\n *   (eg confidence intervals in a forest plot)\n * @param data\n * @param axis_config The configuration object for the specified axis.\n * @returns {Array} [min, max] without any padding applied\n * @private\n */\nLocusZoom.DataLayer.prototype._getDataExtent = function(data, axis_config) {\n    data = data || this.data;\n    // By default this depends only on a single field.\n    return d3.extent(data, function (d) {\n        var f = new LocusZoom.Data.Field(axis_config.field);\n        return +f.resolve(d);\n    });\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension) {\n\n    if (['x', 'y'].indexOf(dimension) === -1) {\n        throw new Error('Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()');\n    }\n\n    var axis_name = dimension + '_axis';\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)) {\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = this._getDataExtent(this.data, axis_layout);\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == 'object') {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === 'x' && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y1'|'y2')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n        throw new Error('Invalid dimension identifier at layer level' + dimension);\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(d, id) {\n    if (typeof this.layout.tooltip != 'object') {\n        throw new Error('DataLayer [' + this.id + '] layout does not define a tooltip');\n    }\n    if (typeof id == 'undefined') { id = this.getElementId(d); }\n    if (this.tooltips[id]) {\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: d,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append('div')\n            .attr('class', 'lz-data_layer-tooltip')\n            .attr('id', id + '-tooltip')\n    };\n    this.updateTooltip(d);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id) {\n    if (typeof id == 'undefined') { id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html('');\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html) {\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable) {\n        this.tooltips[id].selector.insert('button', ':first-child')\n            .attr('class', 'lz-tooltip-close-button')\n            .attr('title', 'Close')\n            .text('×')\n            .on('click', function() {\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(d, id) {\n    if (typeof d == 'string') {\n        id = d;\n    } else if (typeof id == 'undefined') {\n        id = this.getElementId(d);\n    }\n    if (this.tooltips[id]) {\n        if (typeof this.tooltips[id].selector == 'object') {\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function() {\n    for (var id in this.tooltips) {\n        this.destroyTooltip(id);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id) {\n    if (typeof id != 'string') {\n        throw new Error('Unable to position tooltip: id is not a string');\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style('left', (d3.event.pageX) + 'px')\n        .style('top', (d3.event.pageY) + 'px');\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow) {\n        this.tooltips[id].arrow = this.tooltips[id].selector.append('div')\n            .style('position', 'absolute')\n            .attr('class', 'lz-data_layer-tooltip-arrow_top_left');\n    }\n    this.tooltips[id].arrow\n        .style('left', '-1px')\n        .style('top', '-1px');\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function() {\n    for (var id in this.tooltips) {\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element) {\n\n    if (typeof this.layout.tooltip != 'object') { return; }\n    var id = this.getElementId(element);\n\n    var resolveStatus = function(statuses, directive, operator) {\n        var status = null;\n        if (typeof statuses != 'object' || statuses === null) { return null; }\n        if (Array.isArray(directive)) {\n            if (typeof operator == 'undefined') { operator = 'and'; }\n            if (directive.length === 1) {\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === 'and') {\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === 'or') {\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == 'object') {\n            var sub_status;\n            for (var sub_operator in directive) {\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null) {\n                    status = sub_status;\n                } else if (operator === 'and') {\n                    status = status && sub_status;\n                } else if (operator === 'or') {\n                    status = status || sub_status;\n                }\n            }\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == 'string') {\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == 'object') {\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == 'string') {\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == 'object') {\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    var statuses = {};\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status) {\n        var antistatus = 'un' + status;\n        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n        statuses[antistatus] = !statuses[status];\n    }.bind(this));\n\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n    // Otherwise ensure tooltip does not exist\n    if (show_resolved && !hide_resolved) {\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n\n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type) {\n    if (typeof return_type == 'undefined' || ['indexes','elements'].indexOf(return_type) === -1) {\n        return_type = 'indexes';\n    }\n    if (!Array.isArray(filters)) { return []; }\n    var test = function(element, filter) {\n        var operators = {\n            '=': function(a,b) { return a === b; },\n            // eslint-disable-next-line eqeqeq\n            '!=': function(a,b) { return a != b; }, // For absence of a value, deliberately allow weak comparisons (eg undefined/null)\n            '<': function(a,b) { return a < b; },\n            '<=': function(a,b) { return a <= b; },\n            '>': function(a,b) { return a > b; },\n            '>=': function(a,b) { return a >= b; },\n            '%': function(a,b) { return a % b; }\n        };\n        if (!Array.isArray(filter)) { return false; }\n        if (filter.length === 2) {\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]) {\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx) {\n        var match = true;\n        filters.forEach(function(filter) {\n            if (!test(element, filter)) { match = false; }\n        });\n        if (match) { matches.push(return_type === 'indexes' ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters) { return this.filter(filters, 'indexes'); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters) { return this.filter(filters, 'elements'); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx) {\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = 'un' + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + 'Element'] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'Element'] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} toggle True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, toggle, exclusive) {\n    // Sanity checks\n    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n        throw new Error('Invalid status passed to DataLayer.setElementStatus()');\n    }\n    if (typeof element == 'undefined') {\n        throw new Error('Invalid element passed to DataLayer.setElementStatus()');\n    }\n    if (typeof toggle == 'undefined') {\n        toggle = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error) {\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive) {\n        this.setAllElementStatus(status, !toggle);\n    }\n\n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select('#' + element_id).classed('lz-data_layer-' + this.layout.type + '-' + status, toggle);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null) {\n        d3.select('#' + element_status_node_id).classed('lz-data_layer-' + this.layout.type + '-statusnode-' + status, toggle);\n    }\n\n    // Track element ID in the proper status state array\n    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n    if (toggle && element_status_idx === -1) {\n        this.state[this.state_id][status].push(element_id);\n    }\n    if (!toggle && element_status_idx !== -1) {\n        this.state[this.state_id][status].splice(element_status_idx, 1);\n    }\n\n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element);\n\n    // Trigger layout changed event hook\n    this.parent.emit('layout_changed', true);\n    if (status === 'selected') {\n        // Notify parents that a given element has been interacted with. For now, we will only notify on\n        //   \"selected\" type events, which is (usually) a toggle-able state. If elements are exclusive, two selection\n        //   events will be sent in short order as the previously selected element has to be de-selected first\n        this.parent.emit('element_selection', { element: element, active: toggle }, true);\n    }\n    return this;\n\n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive) {\n\n    // Sanity check\n    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n        throw new Error('Invalid status passed to DataLayer.setElementStatusByFilters()');\n    }\n    if (typeof this.state[this.state_id][status] == 'undefined') { return this; }\n    if (typeof toggle == 'undefined') { toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)) { filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive) {\n        this.setAllElementStatus(status, !toggle);\n    }\n\n    // Apply statuses\n    this.filterElements(filters).forEach(function(element) {\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle) {\n\n    // Sanity check\n    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n        throw new Error('Invalid status passed to DataLayer.setAllElementStatus()');\n    }\n    if (typeof this.state[this.state_id][status] == 'undefined') { return this; }\n    if (typeof toggle == 'undefined') { toggle = true; }\n\n    // Apply statuses\n    if (toggle) {\n        this.data.forEach(function(element) {\n            this.setElementStatus(status, element, true);\n        }.bind(this));\n    } else {\n        var status_ids = this.state[this.state_id][status].slice();\n        status_ids.forEach(function(id) {\n            var element = this.getElementById(id);\n            if (typeof element == 'object' && element !== null) {\n                this.setElementStatus(status, element, false);\n            }\n        }.bind(this));\n        this.state[this.state_id][status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection) {\n    if (typeof this.layout.behaviors != 'object') { return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive) {\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match) { return; }\n        selection.on(event_match[0] + '.' + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        'ctrl': (directive.indexOf('ctrl') !== -1),\n        'shift': (directive.indexOf('shift') !== -1)\n    };\n\n    return function(element) {\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey) { return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior) {\n\n            // Route first by the action, if defined\n            if (typeof behavior != 'object' || behavior === null) { return; }\n\n            switch (behavior.action) {\n\n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case 'set':\n                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n\n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case 'unset':\n                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n\n            // Toggle a status\n            case 'toggle':\n                var current_status_boolean = (this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n\n            // Link to a dynamic URL\n            case 'link':\n                if (typeof behavior.href == 'string') {\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == 'string') {\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n\n            // Action not defined, just return\n            default:\n                break;\n\n            }\n\n            return;\n\n        }.bind(this));\n\n    }.bind(this);\n\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function() {\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format) {\n    var default_format = 'json';\n    format = format || default_format;\n    format = (typeof format == 'string' ? format.toLowerCase() : default_format);\n    if (['json','csv','tsv'].indexOf(format) === -1) { format = default_format; }\n    var ret;\n    switch (format) {\n    case 'json':\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e) {\n            ret = null;\n            console.warn('Unable to export JSON data from data layer: ' + this.getBaseId());\n            console.error(e);\n        }\n        break;\n    case 'tsv':\n    case 'csv':\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != 'object') {\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)) {\n                ret = 'Object';\n            } else {\n                var delimiter = (format === 'tsv') ? '\\t' : ',';\n                var header = this.layout.fields.map(function(header) {\n                    return JSON.stringify(header);\n                }).join(delimiter) + '\\n';\n                ret = header + jsonified.map(function(record) {\n                    return this.layout.fields.map(function(field) {\n                        if (typeof record[field] == 'undefined') {\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == 'object' && record[field] !== null) {\n                            return Array.isArray(record[field]) ? '\"[Array(' + record[field].length + ')]\"' : '\"[Object]\"';\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join('\\n');\n            }\n        } catch (e) {\n            ret = null;\n            console.error('Unable to export CSV data from data layer: ' + this.getBaseId() + ';', e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function() {\n    this.svg.container.attr('transform', 'translate(' + this.parent.layout.cliparea.origin.x +  ',' + this.parent.layout.cliparea.origin.y + ')');\n    this.svg.clipRect\n        .attr('width', this.parent.layout.cliparea.width)\n        .attr('height', this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function() {\n\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n    promise.then(function(new_data) {\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != 'object') {\n                throw new Error('invalid layout argument for data layer [' + name + ']');\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw new Error('data layer [' + name + '] not found');\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != 'function') {\n                throw new Error('unable to set data layer [' + name + '], argument provided is not a function');\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw new Error('data layer already exists with name: ' + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw new Error('Attempted to subclass an unknown or unregistered datalayer type');\n        }\n        if (typeof overrides !== 'object') {\n            throw new Error('Must specify an object of properties and methods');\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","'use strict';\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add('annotation_track', function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: '#000000',\n        filters: [],\n        tooltip_positioning: 'middle', // Allowed values: top, middle, bottom\n        hit_area_width: 8,\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw new Error('Annotation track must specify array of filters for selecting points to annotate');\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, 'elements');\n\n        // Put the <g> containing visible lines before the one containing hit areas, so that the hit areas will be on top.\n        var visible_lines_group = this.svg.group.select('g.lz-data_layer-' + self.layout.type + '-visible_lines');\n        if (visible_lines_group.size() === 0) {\n            visible_lines_group = this.svg.group.append('g').attr('class', 'lz-data_layer-' + self.layout.type + '-visible_lines');\n        }\n        var selection = visible_lines_group.selectAll('rect.lz-data_layer-' + self.layout.type)\n            .data(trackData, function (d) { return d[self.layout.id_field]; });\n\n        // Draw rectangles (visual and tooltip positioning)\n        selection.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function (d) { return self.getElementId(d); });\n\n        var width = 1;\n        selection\n            .attr('x', function (d) {return self.parent['x_scale'](d[self.layout.x_axis.field]) - width / 2; })\n            .attr('width', width)\n            .attr('height', self.parent.layout.height)\n            .attr('fill', function(d) { return self.resolveScalableParameter(self.layout.color, d); });\n\n        // Remove unused elements\n        selection.exit()\n            .remove();\n\n        var hit_areas_group = this.svg.group.select('g.lz-data_layer-' + self.layout.type + '-hit_areas');\n        if (hit_areas_group.size() === 0) {\n            hit_areas_group = this.svg.group.append('g').attr('class', 'lz-data_layer-' + self.layout.type + '-hit_areas');\n        }\n        var hit_areas_selection = hit_areas_group.selectAll('rect.lz-data_layer-' + self.layout.type)\n            .data(trackData, function (d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        hit_areas_selection.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function (d) { return self.getElementId(d); });\n\n        // Update the set of elements to reflect new data\n\n        var _getX = function (d, i) { // Helper for position calcs below\n            var x_center = self.parent['x_scale'](d[self.layout.x_axis.field]);\n            var x_left = x_center - self.layout.hit_area_width / 2;\n            if (i >= 1) {\n                // This assumes that the data are in sorted order.\n                var left_node = trackData[i - 1];\n                var left_node_x_center = self.parent['x_scale'](left_node[self.layout.x_axis.field]);\n                x_left = Math.max(x_left, (x_center + left_node_x_center) / 2);\n            }\n            return [x_left, x_center];\n        };\n        hit_areas_selection\n            .attr('height', self.parent.layout.height)\n            .attr('opacity', 0)\n            .attr('x', function (d, i) {\n                var crds = _getX(d,i);\n                return crds[0];\n            }).attr('width', function (d, i) {\n                var crds = _getX(d,i);\n                return (crds[1] - crds[0]) + self.layout.hit_area_width / 2;\n            });\n\n        // Remove unused elements\n        hit_areas_selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(hit_areas_selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n\n        var top_offset = 0;\n        switch(this.layout.tooltip_positioning) {\n        case 'top':\n            arrow_type = 'down';\n            break;\n        case 'bottom':\n            top_offset = data_layer_height;\n            arrow_type = 'up';\n            break;\n        case 'middle':\n        default:\n            var position = d3.mouse(this.svg.container.node());\n            // Position the tooltip so that it does not overlap the mouse pointer\n            top_offset = y_center;\n            if (position[1] > (data_layer_height / 2)) {\n                arrow_type = 'down';\n            } else {\n                arrow_type = 'up';\n            }\n        }\n\n        if (arrow_type === 'up') {\n            top = page_origin.y + top_offset + stroke_width + arrow_width;\n            arrow_top = 0 - stroke_width - arrow_width;\n        } else if (arrow_type === 'down') {\n            top = page_origin.y + top_offset - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_top = tooltip_box.height - stroke_width;\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    return this;\n});\n","'use strict';\n\n/**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n * @class LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.add('forest', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: 'square',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: 'id',\n        confidence_intervals: {\n            start_field: 'ci_start',\n            end_field: 'ci_end'\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = 'y' + this.layout.y_axis.axis + '_scale';\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2) {\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = 'left';\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = 'right';\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Implement the main render function\n    this.render = function() {\n\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1) {\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci')\n                .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append('rect')\n                .attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci')\n                .attr('id', function(d) { return this.getElementId(d) + '_ci'; }.bind(this))\n                .attr('transform', 'translate(0,' + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + ')');\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)) { x = -1000; }\n                if (isNaN(y)) { y = -1000; }\n                return 'translate(' + x + ',' + y + ')';\n            }.bind(this);\n            var ci_width = function(d) {\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()) {\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || 'cubic-in-out')\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width).attr('height', ci_height);\n            } else {\n                ci_selection\n                    .attr('transform', ci_transform)\n                    .attr('width', ci_width).attr('height', ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n\n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point')\n            .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-forest lz-data_layer-forest-point')\n            .attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .attr('transform', 'translate(0,' + initial_y + ')');\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)) { x = -1000; }\n            if (isNaN(y)) { y = -1000; }\n            return 'translate(' + x + ',' + y + ')';\n        }.bind(this);\n\n        var fill = function(d) { return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d) { return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d) { return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d) { return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()) {\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        } else {\n            points_selection\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on('click.event_emitter', function(element_data) {\n            this.parent.emit('element_clicked', element_data, true);\n        }.bind(this));\n\n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n    };\n    return this;\n\n});\n\n/**\n * A y-aligned forest plot in which the y-axis represents item labels, which are dynamically chosen when data is loaded.\n *   Each item is assumed to include both data and confidence intervals.\n *   This allows generating forest plots without defining the layout in advance.\n *\n * @class LocusZoom.DataLayers.category_forest\n * @augments LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.extend('forest', 'category_forest', {\n    _getDataExtent: function(data, axis_config) {\n        // In a forest plot, the data range is determined by *three* fields (beta + CI start/end)\n        var ci_config = this.layout.confidence_intervals;\n        if (ci_config\n            && this.layout.fields.indexOf(ci_config.start_field) !== -1\n            && this.layout.fields.indexOf(ci_config.end_field) !== -1) {\n            var min = function(d) {\n                var f = new LocusZoom.Data.Field(ci_config.start_field);\n                return +f.resolve(d);\n            };\n\n            var max = function(d) {\n                var f = new LocusZoom.Data.Field(ci_config.end_field);\n                return +f.resolve(d);\n            };\n\n            return [d3.min(data, min), d3.max(data, max)];\n        }\n\n        // If there are no confidence intervals set, then range must depend only on a single field\n        return LocusZoom.DataLayer.prototype._getDataExtent.call(this, data, axis_config);\n    },\n\n    getTicks: function(dimension, config) { // Overrides parent method\n        if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n            throw new Error('Invalid dimension identifier' + dimension);\n        }\n\n        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n        // Also assumes that every tick gets assigned a unique matching label\n        var axis_num = this.layout.y_axis.axis;\n        if (dimension === ('y' + axis_num)) {\n            var category_field = this.layout.y_axis.category_field;\n            if (!category_field) {\n                throw new Error('Layout for ' + this.layout.id + ' must specify category_field');\n            }\n\n            return this.data.map(function (item, index) {\n                return {\n                    y: index + 1,\n                    text: item[category_field]\n                };\n            });\n        } else {\n            return [];\n        }\n    },\n\n    applyCustomDataMethods: function () {\n        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n        //  correct extents.\n        var field_to_add = this.layout.y_axis.field;\n        if (!field_to_add) {\n            throw new Error('Layout for ' + this.layout.id + ' must specify yaxis.field');\n        }\n\n        this.data = this.data.map(function (item, index) {\n            item[field_to_add] = index + 1;\n            return item;\n        });\n        // Update axis extents based on one label for every point (with a bit of padding above and below)\n        this.layout.y_axis.floor = 0;\n        this.layout.y_axis.ceiling = this.data.length + 1;\n        return this;\n    }\n});\n","'use strict';\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('genes', function(layout) {\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        // Optionally specify different fill and stroke properties\n        stroke: 'rgb(54, 54, 150)',\n        color: '#363696',\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element) {\n        return this.getElementId(element) + '-statusnode';\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function() {\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function() {\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size) {\n            try {\n                var temp_text = this.svg.group.append('text')\n                    .attr('x', 0).attr('y', 0).attr('class', 'lz-data_layer-genes lz-label')\n                    .style('font-size', font_size)\n                    .text(gene_name + '→');\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e) {\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g) {\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf('.')) {\n                var split = this.data[g].gene_id.split('.');\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = 'middle';\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width) {\n                if (d.start < this.state.start) {\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = 'start';\n                } else if (d.end > this.state.end) {\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = 'end';\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)) {\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = 'start';\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = 'end';\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null) {\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene) {\n                    if (!collision_on_potential_track) {\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)) {\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track) {\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks) {\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t) {\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e) {\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function() {\n\n        var self = this;\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll('g.lz-data_layer-genes')\n            .data(this.data, function(d) { return d.gene_name; });\n\n        selection.enter().append('g')\n            .attr('class', 'lz-data_layer-genes');\n\n        selection.attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .each(function(gene) {\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-data_layer-genes-statusnode')\n                    .data([gene], function(d) { return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-data_layer-genes-statusnode');\n\n                bboxes\n                    .attr('id', function(d) {\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    bboxes\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundary_fill = function(d) { return self.resolveScalableParameter(self.layout.color, d); };\n                var boundary_stroke = function(d) { return self.resolveScalableParameter(self.layout.stroke, d); };\n                var boundaries = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-boundary')\n                    .data([gene], function(d) { return d.gene_name + '_boundary'; })\n                    .style({ fill: boundary_fill, stroke: boundary_stroke });\n\n                boundaries.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-boundary');\n\n                width = function(d) {\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function() {\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d) {\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()) {\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    boundaries\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll('text.lz-data_layer-genes.lz-label')\n                    .data([gene], function(d) { return d.gene_name + '_label'; });\n\n                labels.enter().append('text')\n                    .attr('class', 'lz-data_layer-genes lz-label');\n\n                labels\n                    .attr('text-anchor', function(d) {\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d) {\n                        return (d.strand === '+') ? d.gene_name + '→' : '←' + d.gene_name;\n                    })\n                    .style('font-size', gene.parent.layout.label_font_size);\n\n                x = function(d) {\n                    if (d.display_range.text_anchor === 'middle') {\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === 'start') {\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === 'end') {\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()) {\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('x', x).attr('y', y);\n                } else {\n                    labels\n                        .attr('x', x).attr('y', y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                var exon_fill = function(d) { return self.resolveScalableParameter(self.layout.color, d.parent.parent); };\n                var exon_stroke = function(d) { return self.resolveScalableParameter(self.layout.stroke, d.parent.parent); };\n\n                var exons = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-exon')\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d) { return d.exon_id; });\n\n                exons.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-exon');\n\n                exons\n                    .style({ fill: exon_fill, stroke: exon_stroke });\n\n                width = function(d) {\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function() {\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d) {\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function() {\n                    return ((gene.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()) {\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    exons\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-clickarea')\n                    .data([gene], function(d) { return d.gene_name + '_clickarea'; });\n\n                clickareas.enter().append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-clickarea');\n\n                clickareas\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '_clickarea';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    clickareas\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on('click.event_emitter', function(element) {\n                    element.parent.parent.emit('element_clicked', element, true);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select('#' + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)) {\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = 'down';\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = 'up';\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add('genome_legend', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: 'rgb(155, 155, 188)',\n            dark: 'rgb(95, 95, 128)'\n        },\n        chromosome_label_colors: {\n            light: 'rgb(120, 120, 186)',\n            dark: 'rgb(0, 0, 66)'\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function() {\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i) {\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d['genome:base_pairs'];\n            position += d['genome:base_pairs'];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll('rect.lz-data_layer-genome_legend')\n            .data(this.data, function(d) { return d['genome:chr']; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-genome_legend');\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr('fill', function(d) { return (d['genome:chr'] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr('x', function(d) { return panel.x_scale(d.genome_start); })\n            .attr('y', 0)\n            .attr('width', function(d) { return panel.x_scale(d['genome:base_pairs']); })\n            .attr('height', panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw new Error('Genome legend cannot understand the specified variant position');\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr - 1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll('rect.lz-data_layer-genome_legend-marker')\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append('rect')\n            .attr('class', 'lz-data_layer-genome_legend-marker');\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                'fill': 'rgba(255, 250, 50, 0.8)',\n                'stroke': 'rgba(255, 250, 50, 0.8)',\n                'stroke-width': '3px'\n            })\n            .attr('x', function(d) { return panel.x_scale(d.start); })\n            .attr('y', 0)\n            .attr('width', function(d) { return panel.x_scale(d.end - d.start); })\n            .attr('height', panel.layout.cliparea.height);\n\n        region.exit().remove();\n\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add('intervals', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: 'start',\n        end_field: 'end',\n        track_split_field: 'state_id',\n        track_split_order: 'DESC',\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: '#B8B8B8',\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element) {\n        if (this.layout.split_tracks) {\n            return (this.getBaseId() + '-statusnode-' + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, '_');\n        }\n        return this.getElementId(element) + '-statusnode';\n    }.bind(this);\n\n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function() {\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n\n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function() {\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n\n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks) {\n            this.data.map(function(d) {\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === 'DESC') { index.reverse(); }\n            index.forEach(function(val) {\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i) {\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks) {\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null) {\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval) {\n                        if (!collision_on_potential_track) {\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)) {\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track) {\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks) {\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function() {\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll('.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared').remove();\n        Object.keys(this.track_split_field_index).forEach(function(key) {\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : 'none')};\n            this.svg.group.insert('rect', ':first-child')\n                .attr('id', this.getElementStatusNodeId(psuedoElement))\n                .attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared')\n                .attr('rx', this.layout.bounding_box_padding).attr('ry', this.layout.bounding_box_padding)\n                .attr('width', this.parent.layout.cliparea.width)\n                .attr('height', this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr('x', 0)\n                .attr('y', (this.track_split_field_index[key] - 1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n\n        // Render interval groups\n        var selection = this.svg.group.selectAll('g.lz-data_layer-intervals')\n            .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append('g')\n            .attr('class', 'lz-data_layer-intervals');\n\n        selection.attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .each(function(interval) {\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? 'none' : null)};\n                var statusnodes = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete')\n                    .data([interval], function(d) { return data_layer.getElementId(d) + '-statusnode'; });\n                statusnodes.enter().insert('rect', ':first-child')\n                    .attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete');\n                statusnodes\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '-statusnode';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d) {\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    statusnodes\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-interval_rect')\n                    .data([interval], function(d) { return d[data_layer.layout.id_field] + '_interval_rect'; });\n\n                rects.enter().append('rect')\n                    .attr('class', 'lz-data_layer-intervals lz-interval_rect');\n\n                height = data_layer.layout.track_height;\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d) {\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d) {\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n\n\n                if (data_layer.canTransition()) {\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height)\n                        .attr('x', x).attr('y', y)\n                        .attr('fill', fill)\n                        .attr('fill-opacity', fill_opacity);\n                } else {\n                    rects\n                        .attr('width', width).attr('height', height)\n                        .attr('x', x).attr('y', y)\n                        .attr('fill', fill)\n                        .attr('fill-opacity', fill_opacity);\n                }\n\n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-clickarea')\n                    .data([interval], function(d) { return d.interval_name + '_clickarea'; });\n\n                clickareas.enter().append('rect')\n                    .attr('class', 'lz-data_layer-intervals lz-clickarea');\n\n                clickareas\n                    .attr('id', function(d) {\n                        return data_layer.getElementId(d) + '_clickarea';\n                    })\n                    .attr('rx', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr('ry', function() {\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d) {\n                    return d.display_range.width;\n                };\n                height = function() {\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d) {\n                    return d.display_range.start;\n                };\n                y = function(d) {\n                    return ((d.track - 1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()) {\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || 'cubic-in-out')\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                } else {\n                    clickareas\n                        .attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on('click', function(element_data) {\n                    element_data.parent.parent.emit('element_clicked', element_data, true);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks) {\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n\n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select('#' + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)) {\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = 'down';\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = 'up';\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function() {\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? 'y' + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks) {\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend) {\n                this.parent.legend.hide();\n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height / 2)),\n                        end: (this.layout.track_height / 2)\n                    }\n                };\n                this.layout.legend.forEach(function(element) {\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track) {\n                        if (this.layout.track_split_order === 'DESC') {\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend) {\n                if (!this.layout.always_hide_legend) { this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function() {\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend) {\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot, representing either a trace or a filled curve.\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('line', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: 'none',\n            'stroke-width': '2px'\n        },\n        interpolate: 'linear',\n        x_axis: { field: 'x' },\n        y_axis: { field: 'y', axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function() {\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision) {\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision) {\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style['stroke-width']) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1) {\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2) {\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y) {\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = 'up';\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + 'px', top: top + 'px' });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style({ 'left': arrow_left + 'px', top: arrow_top + 'px' });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function() {\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // Generate the line\n        if (this.layout.style.fill && this.layout.style.fill !== 'none') {\n            // Filled curve: define the line as a filled boundary\n            this.line = d3.svg.area()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y0(function(d) {return parseFloat(panel[y_scale](0));})\n                .y1(function(d) { return parseFloat(panel[y_scale](d[y_field])); });\n        } else {\n            // Basic line\n            this.line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n        }\n\n        // Apply line and style\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('d', this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr('d', this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip) {\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + 'px';\n            var hitarea = this.svg.group\n                .selectAll('path.lz-data_layer-line-hitarea')\n                .data([this.data]);\n            hitarea.enter()\n                .append('path')\n                .attr('class', 'lz-data_layer-line-hitarea')\n                .style('stroke-width', hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr('d', hitarea_line)\n                .on('mouseover', function() {\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on('mousemove', function() {\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on('mouseout', function() {\n                    data_layer.tooltip_timeout = setTimeout(function() {\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle) {\n        // Sanity check\n        if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n            throw new Error('Invalid status passed to DataLayer.setAllElementStatus()');\n        }\n        if (typeof this.state[this.state_id][status] == 'undefined') { return this; }\n        if (typeof toggle == 'undefined') { toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = 'lz-data_layer-line';\n        Object.keys(this.global_statuses).forEach(function(global_status) {\n            if (this.global_statuses[global_status]) { path_class += ' lz-data_layer-line-' + global_status; }\n        }.bind(this));\n        this.path.attr('class', path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit('layout_changed', true);\n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add('orthogonal_line', function(layout) {\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            'stroke': '#D3D3D3',\n            'stroke-width': '3px',\n            'stroke-dasharray': '10px 10px'\n        },\n        orientation: 'horizontal',\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if (['horizontal','vertical'].indexOf(layout.orientation) === -1) {\n        layout.orientation = 'horizontal';\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function() {\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n        var x_extent = 'x_extent';\n        var y_extent = 'y' + this.layout.y_axis.axis + '_extent';\n        var x_range = 'x_range';\n        var y_range = 'y' + this.layout.y_axis.axis + '_range';\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === 'horizontal') {\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d['x']));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d['y']));\n                return isNaN(y) ? panel[y_range][i] : y;\n            })\n            .interpolate('linear');\n\n        // Apply line and style\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('d', this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr('d', this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    return this;\n\n});\n","'use strict';\n\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @class LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.add('scatter', function(layout) {\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: 'circle',\n        tooltip_positioning: 'horizontal',\n        color: '#888888',\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: 'id'\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)) {\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = 'y' + this.layout.y_axis.axis + '_scale';\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === 'vertical') {\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)) {\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = 'up';\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2) {\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type)\n            .style('left', arrow_left + 'px')\n            .style('top', arrow_top + 'px');\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function() {\n        var data_layer = this;\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl) {\n            var dnx = +dn.attr('x');\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines) {\n                var dnlx2 = +dnl.attr('x2');\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style('text-anchor') === 'start') {\n                dn.style('text-anchor', 'end');\n                dn.attr('x', dnx - text_swing);\n                if (handle_lines) { dnl.attr('x2', dnlx2 - line_swing); }\n            } else {\n                dn.style('text-anchor', 'start');\n                dn.attr('x', dnx + text_swing);\n                if (handle_lines) { dnl.attr('x2', dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr('x');\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x) {\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style('text-anchor') === 'end') {\n                return;\n            }\n            var dax = +da.attr('x');\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (collision) {\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr('x');\n                    if (dax - abound.width - spacing < min_x) {\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function() {\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        if (!this.layout.label) {\n            // Guard against layout changing in the midst of iterative rerender\n            return;\n        }\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr('y');\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) {\n                    return;\n                }\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr('text-anchor') !== db.attr('text-anchor')) {\n                    return;\n                }\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (!collision) {\n                    return;\n                }\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr('y');\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height / 2) < min_y) {\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height / 2) < min_y) {\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height / 2) > max_y) {\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height / 2) > max_y) {\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr('y',new_a_y);\n                db.attr('y',new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines) {\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr('y2',function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr('y');\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150) {\n                setTimeout(function() {\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function() {\n\n        var data_layer = this;\n        var x_scale = 'x_scale';\n        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n\n        if (this.layout.label) {\n            // Apply filters to generate a filtered data set\n            var filtered_data = this.data.filter(function(d) {\n                if (!data_layer.layout.label.filters) {\n                    return true;\n                } else {\n                    // Start by assuming a match, run through all filters to test if not a match on any one\n                    var match = true;\n                    data_layer.layout.label.filters.forEach(function(filter) {\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d);\n                        if (['!=', '='].indexOf(filter.operator) === -1 && isNaN(field_value)) {\n                            // If the filter can only be used with numbers, then the value must be numeric.\n                            match = false;\n                        } else {\n                            switch (filter.operator) {\n                            case '<':\n                                if (!(field_value < filter.value)) { match = false; }\n                                break;\n                            case '<=':\n                                if (!(field_value <= filter.value)) { match = false; }\n                                break;\n                            case '>':\n                                if (!(field_value > filter.value)) { match = false; }\n                                break;\n                            case '>=':\n                                if (!(field_value >= filter.value)) { match = false; }\n                                break;\n                            case '=':\n                                if (!(field_value === filter.value)) { match = false; }\n                                break;\n                            case '!=':\n                                // Deliberately allow weak comparisons to test for \"anything with a value present\" (null or undefined)\n                                // eslint-disable-next-line eqeqeq\n                                if (field_value == filter.value) { match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                }\n            });\n            // Render label groups\n            var self = this;\n            this.label_groups = this.svg.group\n                .selectAll('g.lz-data_layer-' + this.layout.type + '-label')\n                .data(filtered_data, function(d) { return d[self.layout.id_field]  + '_label'; });\n            this.label_groups.enter()\n                .append('g')\n                .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n            // Render label texts\n            if (this.label_texts) { this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append('text')\n                .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n            this.label_texts\n                .text(function(d) {\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || '');\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    'x': function(d) {\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)) { x = -1000; }\n                        return x;\n                    },\n                    'y': function(d) {\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)) { y = -1000; }\n                        return y;\n                    },\n                    'text-anchor': function() {\n                        return 'start';\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines) {\n                if (this.label_lines) { this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append('line')\n                    .attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        'x1': function(d) {\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)) { x = -1000; }\n                            return x;\n                        },\n                        'y1': function(d) {\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)) { y = -1000; }\n                            return y;\n                        },\n                        'x2': function(d) {\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing / 2);\n                            if (isNaN(x)) { x = -1000; }\n                            return x;\n                        },\n                        'y2': function(d) {\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)) { y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        } else {\n            // If the layout definition has changed (& no longer specifies labels), strip any previously rendered\n            if (this.label_groups) { this.label_groups.remove(); }\n            if (this.label_lines) { this.label_lines.remove(); }\n        }\n\n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll('path.lz-data_layer-' + this.layout.type)\n            .data(this.data, function(d) { return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-' + this.layout.type)\n            .attr('id', function(d) { return this.getElementId(d); }.bind(this))\n            .attr('transform', 'translate(0,' + initial_y + ')');\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)) { x = -1000; }\n            if (isNaN(y)) { y = -1000; }\n            return 'translate(' + x + ',' + y + ')';\n        }.bind(this);\n\n        var fill = function(d) { return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d) { return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d) { return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d) { return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()) {\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || 'cubic-in-out')\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        } else {\n            selection\n                .attr('transform', transform)\n                .attr('fill', fill)\n                .attr('fill-opacity', fill_opacity)\n                .attr('d', shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on('click.event_emitter', function(element) {\n            this.parent.emit('element_clicked', element, true);\n        }.bind(this));\n\n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n\n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label) {\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection\n            this.label_texts.on('click.event_emitter', function(element) {\n                this.parent.emit('element_clicked', element, true);\n            }.bind(this));\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n\n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element) {\n        var ref = null;\n        if (typeof element == 'undefined') {\n            throw new Error('makeLDReference requires one argument of any type');\n        } else if (typeof element == 'object') {\n            if (this.layout.id_field && typeof element[this.layout.id_field] != 'undefined') {\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element['id'] != 'undefined') {\n                ref = element['id'].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n\n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend('scatter', 'category_scatter', {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || 'x';\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw new Error('Layout for ' + this.layout.id + ' must specify category_field');\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i) {\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || 'x';\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    },\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme: function(categoryNames) {\n        var colorParams = this.layout.color.parameters;\n        var baseParams = this._base_layout.color.parameters;\n\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n        if (this.layout.color.scale_function !== 'categorical_bin') {\n            throw new Error('This layer requires that coloring be specified as a `categorical_bin`');\n        }\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            var parameters_categories_hash = {};\n            baseParams.categories.forEach(function (category) { parameters_categories_hash[category] = 1; });\n            if (categoryNames.every(function (name) { return parameters_categories_hash.hasOwnProperty(name); })) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        var colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n            colors = color_scale().range();\n        }\n        while (colors.length < categoryNames.length) { colors = colors.concat(colors); }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if (['x', 'y1', 'y2'].indexOf(dimension) === -1) {\n            throw new Error('Invalid dimension identifier');\n        }\n        var position = config.position || 'left';\n        if (['left', 'center', 'right'].indexOf(position) === -1) {\n            throw new Error('Invalid tick position');\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === 'y') {\n            return [];\n        }\n\n        if (dimension === 'x') {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var knownCategories = this.layout.color.parameters.categories || [];\n            var knownColors = this.layout.color.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case 'left':\n                    xPos = bounds[0];\n                    break;\n                case 'center':\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case 'right':\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        'fill': knownColors[knownCategories.indexOf(category)] || '#000000'\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i = 0; i < sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw new Error('KnownDataSources at position ' + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn('Data source added does not have a SOURCE_NAME');\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw new Error('Attempted to subclass an unknown or unregistered data source');\n        }\n        if (!source_name) {\n            throw new Error('Must provide a name for the new data source');\n        }\n        if (typeof overrides !== 'object') {\n            throw new Error('Must specify an object of properties and methods');\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn('Warning: KnownDataSources.push() is deprecated. Use .add() instead');\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw new Error('Unable to find data source for name: ' + name);\n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw new Error('transformation ' + name + ' not found');\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x)) !== null) {\n            funs.push(result[1]);\n        }\n        if (funs.length === 1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i < funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1) === '|') {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1) === '|') {\n            throw new Error('transformation name should not start with a pipe');\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw new Error('transformation already exists with name: ' + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add('neglog10', function(x) {\n    if (isNaN(x) || x <= 0) { return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add('logtoscinotation', function(x) {\n    if (isNaN(x)) { return 'NaN'; }\n    if (x === 0) { return '1'; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1) {\n        return (base / 10).toFixed(4);\n    } else if (exp === 2) {\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + ' × 10^-' + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add('scinotation', function(x) {\n    if (isNaN(x)) { return 'NaN'; }\n    if (x === 0) { return '0'; }\n\n    var abs = Math.abs(x);\n    var log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3) {\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace('+', '').replace('e', ' × 10^');\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add('urlencode', function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add('htmlescape', function(str) {\n    if ( !str ) {\n        return '';\n    }\n    str = str + '';\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return '&#039;';\n        case '\"':\n            return '&quot;';\n        case '<':\n            return '&lt;';\n        case '>':\n            return '&gt;';\n        case '&':\n            return '&amp;';\n        case '`':\n            return '&#x60;';\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === 'undefined' && typeof value === 'undefined') {\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw new Error('scale function [' + name + '] not found');\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw new Error('scale function already exists with name: ' + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add('if', function(parameters, input) {\n    if (typeof input == 'undefined' || parameters.field_value !== input) {\n        if (typeof parameters.else != 'undefined') {\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add('numerical_bin', function(parameters, input) {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr) {\n        if (+input < prev || (+input >= prev && +input < curr)) {\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add('categorical_bin', function(parameters, value) {\n    if (typeof value == 'undefined' || parameters.categories.indexOf(value) === -1) {\n        return (parameters.null_value ? parameters.null_value : null);\n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add('interpolate', function(parameters, input) {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length) { return nullval; }\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) { return nullval; }\n    if (+input <= parameters.breaks[0]) {\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length - 1]) {\n        return values[breaks.length - 1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx) {\n            if (!idx) { return; }\n            if (breaks[idx - 1] <= +input && breaks[idx] >= +input) { upper_idx = idx; }\n        });\n        if (upper_idx === null) { return nullval; }\n        var normalized_input = (+input - breaks[upper_idx - 1]) / (breaks[upper_idx] - breaks[upper_idx - 1]);\n        if (!isFinite(normalized_input)) { return nullval; }\n        return d3.interpolate(values[upper_idx - 1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent) {\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)) {\n        throw new Error('Unable to create dashboard, parent must be a locuszoom plot or panel');\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + '.dashboard';\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? 'plot' : 'panel';\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === 'plot' ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)) {\n        this.parent.layout.dashboard.components.forEach(function(layout) {\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === 'panel') {\n        d3.select(this.parent.parent.svg.node().parentNode).on('mouseover.' + this.id, function() {\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style('visibility') === 'hidden') { this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on('mouseout.' + this.id, function() {\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function() { this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function() {\n    if (this.persist) { return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component) {\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function() {\n    if (!this.selector) {\n        switch (this.type) {\n        case 'plot':\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert('div',':first-child');\n            break;\n        case 'panel':\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert('div', '.lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain').classed('lz-panel-dashboard', true);\n            break;\n        }\n        this.selector.classed('lz-dashboard', true).classed('lz-' + this.type + '-dashboard', true).attr('id', this.id);\n    }\n    this.components.forEach(function(component) { component.show(); });\n    this.selector.style({ visibility: 'visible' });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function() {\n    if (!this.selector) { return this; }\n    this.components.forEach(function(component) { component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function() {\n    if (!this.selector) { return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === 'panel') {\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + 'px';\n        var left = page_origin.x.toString() + 'px';\n        var width = (this.parent.layout.width - 4).toString() + 'px';\n        this.selector.style({ position: 'absolute', top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component) { component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function() {\n    if (!this.selector || this.shouldPersist()) { return this; }\n    this.components.forEach(function(component) { component.hide(); });\n    this.selector.style({ visibility: 'hidden' });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force) {\n    if (typeof force == 'undefined') { force = false; }\n    if (!this.selector) { return this; }\n    if (this.shouldPersist() && !force) { return this; }\n    this.components.forEach(function(component) { component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color) { this.layout.color = 'gray'; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard) {\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === 'panel') {\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position) { this.layout.position = 'left'; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function() {\n    if (!this.parent || !this.parent.selector) { return; }\n    if (!this.selector) {\n        var group_position = (['start','middle','end'].indexOf(this.layout.group_position) !== -1 ? ' lz-dashboard-group-' + this.layout.group_position : '');\n        this.selector = this.parent.selector.append('div')\n            .attr('class', 'lz-dashboard-' + this.layout.position + group_position);\n        if (this.layout.style) { this.selector.style(this.layout.style); }\n        if (typeof this.initialize == 'function') { this.initialize(); }\n    }\n    if (this.button && this.button.status === 'highlighted') { this.button.menu.show(); }\n    this.selector.style({ visibility: 'visible' });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function() { /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function() {\n    if (this.button) { this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function() {\n    if (this.persist) { return true; }\n    if (this.button && this.button.persist) { return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function() {\n    if (!this.selector || this.shouldPersist()) { return this; }\n    if (this.button) { this.button.menu.hide(); }\n    this.selector.style({ visibility: 'hidden' });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force) {\n    if (typeof force == 'undefined') { force = false; }\n    if (!this.selector) { return this; }\n    if (this.shouldPersist() && !force) { return this; }\n    if (this.button && this.button.menu) { this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != 'object') {\n                throw new Error('invalid layout argument for dashboard component [' + name + ']');\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw new Error('dashboard component [' + name + '] not found');\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != 'function') {\n                throw new Error('unable to set dashboard component [' + name + '], argument provided is not a function');\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw new Error('dashboard component already exists with name: ' + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {\n\n    if (!(parent instanceof LocusZoom.Dashboard.Component)) {\n        throw new Error('Unable to create dashboard component button, invalid parent');\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = 'a';\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag) {\n        if (typeof tag != 'undefined') { this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = '';\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html) {\n        if (typeof html != 'undefined') { this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHtml instead\n     */\n    this.setText = this.setHtml;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = '';\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title) {\n        if (typeof title != 'undefined') { this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = 'gray';\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color) {\n        if (typeof color != 'undefined') {\n            if (['gray', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'].indexOf(color) !== -1) { this.color = color; }\n            else { this.color = 'gray'; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style) {\n        if (typeof style != 'undefined') { this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function() {\n        var group_position = (['start','middle','end'].indexOf(this.parent.layout.group_position) !== -1 ? ' lz-dashboard-button-group-' + this.parent.layout.group_position : '');\n        return 'lz-dashboard-button lz-dashboard-button-' + this.color + (this.status ? '-' + this.status : '') + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent) { this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function() {\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = '';\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status) {\n        if (typeof status != 'undefined' && ['', 'highlighted', 'disabled'].indexOf(status) !== -1) { this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        if (bool) { return this.setStatus('highlighted'); }\n        else if (this.status === 'highlighted') { return this.setStatus(''); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool) {\n        if (typeof bool == 'undefined') { bool = true; } else { bool = Boolean(bool); }\n        if (bool) { return this.setStatus('disabled'); }\n        else if (this.status === 'disabled') { return this.setStatus(''); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function() {};\n    this.setOnMouseover = function(onmouseover) {\n        if (typeof onmouseover == 'function') { this.onmouseover = onmouseover; }\n        else { this.onmouseover = function() {}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function() {};\n    this.setOnMouseout = function(onmouseout) {\n        if (typeof onmouseout == 'function') { this.onmouseout = onmouseout; }\n        else { this.onmouseout = function() {}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function() {};\n    this.setOnclick = function(onclick) {\n        if (typeof onclick == 'function') { this.onclick = onclick; }\n        else { this.onclick = function() {}; }\n        return this;\n    };\n\n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function() {\n        if (!this.parent) { return; }\n        if (!this.selector) {\n            this.selector = this.parent.selector.append(this.tag).attr('class', this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function() { return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function() {\n        if (!this.selector) { return this; }\n        this.preUpdate();\n        this.selector\n            .attr('class', this.getClass())\n            .attr('title', this.title).style(this.style)\n            .on('mouseover', (this.status === 'disabled') ? null : this.onmouseover)\n            .on('mouseout', (this.status === 'disabled') ? null : this.onmouseout)\n            .on('click', (this.status === 'disabled') ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function() { return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function() {\n        if (this.selector && !this.shouldPersist()) {\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };\n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function() {\n            if (!this.menu.outer_selector) {\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                    .attr('class', 'lz-dashboard-menu lz-dashboard-menu-' + this.color)\n                    .attr('id', this.parent_svg.getBaseId() + '.dashboard.menu');\n                this.menu.inner_selector = this.menu.outer_selector.append('div')\n                    .attr('class', 'lz-dashboard-menu-content');\n                this.menu.inner_selector.on('scroll', function() {\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: 'visible' });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector) { this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === 'panel') {\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                'top': top.toString() + 'px',\n                'left': left.toString() + 'px',\n                'max-width': container_max_width.toString() + 'px',\n                'max-height': max_height.toString() + 'px',\n                'height': height.toString() + 'px'\n            });\n            this.menu.inner_selector.style({ 'max-width': content_max_width.toString() + 'px' });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.outer_selector.style({ visibility: 'hidden' });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function() {\n            if (!this.menu.outer_selector) { return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function() { /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function) {\n            if (typeof menu_populate_function == 'function') {\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function() {\n                    if (this.menu.hidden) {\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent) { this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add('title', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function() {\n        this.div_selector = this.parent.selector.append('div')\n            .attr('class', 'lz-dashboard-title lz-dashboard-' + this.layout.position);\n        this.title_selector = this.div_selector.append('h3');\n        return this.update();\n    };\n    this.update = function() {\n        var title = layout.title.toString();\n        if (this.layout.subtitle) { title += ' <small>' + this.layout.subtitle + '</small>'; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('dimensions', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        var display_width = this.parent_plot.layout.width.toString().indexOf('.') === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf('.') === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + 'px × ' + display_height + 'px');\n        if (layout.class) { this.selector.attr('class', layout.class); }\n        if (layout.style) { this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('region_scale', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null) {\n            this.selector.style('display', null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style('display', 'none');\n        }\n        if (layout.class) { this.selector.attr('class', layout.class); }\n        if (layout.style) { this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('download', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml('Download Image').setTitle('Download image of the current plot as locuszoom.svg')\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed('lz-dashboard-button-gray-disabled', true)\n                    .html('Preparing Image');\n                this.generateBase64SVG().then(function(base64_string) {\n                    this.button.selector\n                        .attr('href', 'data:image/svg+xml;base64,\\n' + base64_string)\n                        .classed('lz-dashboard-button-gray-disabled', false)\n                        .classed('lz-dashboard-button-gray-highlighted', true)\n                        .html('Download Image');\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed('lz-dashboard-button-gray-highlighted', false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr('href-lang', 'image/svg+xml').attr('download', 'locuszoom.svg');\n        return this;\n    };\n    this.css_string = '';\n    for (var stylesheet in Object.keys(document.styleSheets)) {\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf('locuszoom.css') !== -1) {\n            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n            LocusZoom.createCORSPromise('GET', document.styleSheets[stylesheet].href)\n                .then(function(response) {\n                    this.css_string = response.replace(/[\\r\\n]/g,' ').replace(/\\s+/g,' ');\n                    if (this.css_string.indexOf('/* ! LocusZoom HTML Styles */')) {\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf('/* ! LocusZoom HTML Styles */'));\n                    }\n                }.bind(this));\n            break;\n        }\n    }\n    this.generateBase64SVG = function() {\n        return Q.fcall(function () {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append('div').style('display', 'none')\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll('g.lz-curtain').remove();\n            container.selectAll('g.lz-mouse_guide').remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll('g.tick text').each(function() {\n                var dy = +(d3.select(this).attr('dy').substring(-2).slice(0,-2)) * 10;\n                d3.select(this).attr('dy', dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select('svg').node().parentNode).html();\n            var style_def = '<style type=\"text/css\"><![CDATA[ ' + this.css_string + ' ]]></style>';\n            var insert_at = initial_html.indexOf('>') + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Base64-encode the string and return it\n            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n                return String.fromCharCode('0x' + p1);\n            }));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add('remove_panel', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml('×').setTitle('Remove panel')\n            .setOnclick(function() {\n                if (!layout.suppress_confirm && !confirm('Are you sure you want to remove this panel? This cannot be undone!')) {\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on('mouseover.' + panel.getBaseId() + '.dashboard', null);\n                d3.select(panel.parent.svg.node().parentNode).on('mouseout.' + panel.getBaseId() + '.dashboard', null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('move_panel_up', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) {\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml('▴').setTitle('Move panel up')\n            .setOnclick(function() {\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('move_panel_down', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) {\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length - 1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml('▾').setTitle('Move panel down')\n            .setOnclick(function() {\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add('shift_region', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n        this.update = function() {};\n        console.warn('Unable to add shift_region dashboard component: plot state does not have region bounds');\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0) { layout.step = 50000; }\n    if (typeof layout.button_html !== 'string') { layout.button_html = layout.step > 0 ? '>' : '<'; }\n    if (typeof layout.button_title !== 'string') {\n        layout.button_title = 'Shift region by ' + (layout.step > 0 ? '+' : '-') + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add('zoom_region', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n        this.update = function() {};\n        console.warn('Unable to add zoom_region dashboard component: plot state does not have region bounds');\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0) { layout.step = 0.2; }\n    if (typeof layout.button_html != 'string') { layout.button_html = layout.step > 0 ? 'z–' : 'z+'; }\n    if (typeof layout.button_title != 'string') {\n        layout.button_title = 'Zoom region ' + (layout.step > 0 ? 'out' : 'in') + ' by ' + (Math.abs(layout.step) * 100).toFixed(1) + '%';\n    }\n    this.update = function() {\n        if (this.button) {\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale) {\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale) {\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function() {\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)) {\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)) {\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add('menu', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function() {\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add('covariates_model', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function() {\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference) {\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == 'object' && typeof element.html != 'string') {\n                    element.html = ( (typeof element_reference.toHTML == 'function') ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx) {\n                if (typeof this.state.model.covariates[idx] == 'undefined') {\n                    throw new Error('Unable to remove model covariate, invalid index: ' + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function() {\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function() {\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function() {\n\n        if (this.button) { return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function() {\n            var selector = this.button.menu.inner_selector;\n            selector.html('');\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != 'undefined') {\n                selector.append('div').html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length) {\n                selector.append('i').html('no covariates in model');\n            } else {\n                selector.append('h5').html('Model Covariates (' + this.parent_plot.state.model.covariates.length + ')');\n                var table = selector.append('table');\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx) {\n                    var html = ( (typeof covariate == 'object' && typeof covariate.html == 'string') ? covariate.html : covariate.toString() );\n                    var row = table.append('tr');\n                    row.append('td').append('button')\n                        .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color)\n                        .style({ 'margin-left': '0em' })\n                        .on('click', function() {\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html('×');\n                    row.append('td').html(html);\n                }.bind(this));\n                selector.append('button')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color)\n                    .style({ 'margin-left': '4px' }).html('× Remove All Covariates')\n                    .on('click', function() {\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function() {\n            var html = 'Model';\n            if (this.parent_plot.state.model.covariates.length) {\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? 'covariates' : 'covariate';\n                html += ' (' + this.parent_plot.state.model.covariates.length + ' ' + cov + ')';\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('toggle_split_tracks', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id) { layout.data_layer_id = 'intervals'; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]) {\n        throw new Error('Dashboard toggle split tracks component missing valid data layer ID');\n    }\n    this.update = function() {\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? 'Merge Tracks' : 'Split Tracks';\n        if (this.button) {\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color).setHtml(html)\n                .setTitle('Toggle whether tracks are split apart or merged together')\n                .setOnclick(function() {\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout) { clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function() {\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('resize_to_data', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button) { return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml('Resize to Data')\n            .setTitle('Automatically resize this panel to fit the data its currently showing')\n            .setOnclick(function() {\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('toggle_legend', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        var html = this.parent_panel.legend.layout.hidden ? 'Show Legend' : 'Hide Legend';\n        if (this.button) {\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle('Show or hide the legend for this panel')\n            .setOnclick(function() {\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add('data_layers', function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function() {\n\n        if (typeof layout.button_html != 'string') { layout.button_html = 'Data Layers'; }\n        if (typeof layout.button_title != 'string') { layout.button_title = 'Manipulate Data Layers (sort, dim, show/hide, etc.)'; }\n\n        if (this.button) { return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function() {\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function() {\n            this.button.menu.inner_selector.html('');\n            var table = this.button.menu.inner_selector.append('table');\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx) {\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != 'string') ? data_layer.id : data_layer.layout.name;\n                var row = table.append('tr');\n                // Layer name\n                row.append('td').html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj) {\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]) {\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = 'un' + status_verb + 'AllElements';\n                        highlight = '-highlighted';\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + 'AllElements';\n                        highlight = '';\n                    }\n                    row.append('td').append('a')\n                        .attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color + highlight)\n                        .style({ 'margin-left': '0em' })\n                        .on('click', function() { data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append('td');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-' + this.layout.color + (at_bottom ? '-disabled' : ''))\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() { data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html('▾').attr('title', 'Move layer down (further back)');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-' + this.layout.color + (at_top ? '-disabled' : ''))\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() { data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html('▴').attr('title', 'Move layer up (further front)');\n                td.append('a')\n                    .attr('class', 'lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red')\n                    .style({ 'margin-left': '0em' })\n                    .on('click', function() {\n                        if (confirm('Are you sure you want to remove the ' + name + ' layer? This cannot be undone!')) {\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html('×').attr('title', 'Remove layer');\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add('display_options', function (layout) {\n    if (typeof layout.button_html != 'string') { layout.button_html = 'Display options...'; }\n    if (typeof layout.button_title != 'string') { layout.button_title = 'Control how plot items are displayed'; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || ['color', 'fill_opacity', 'label', 'legend',\n        'point_shape', 'point_size', 'tooltip', 'tooltip_positioning'];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    if (!dataLayer) {\n        throw new Error(\"Display options could not locate the specified layer_name: '\" + layout.layer_name + \"'\");\n    }\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot !== undefined) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = 'default';\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html('');\n        var table = self.button.menu.inner_selector.append('table');\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append('tr');\n            var radioId = '' + uniqueID + row_id;\n            row.append('td')\n                .append('input')\n                .attr({id: radioId, type: 'radio', name: 'display-option-' + uniqueID, value: row_id})\n                .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                .property('checked', (row_id === self._selected_item))\n                .on('click', function () {\n                    // If an option is not specified in these display options, use the original defaults\n                    allowed_fields.forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name] || defaultConfig[field_name];\n                    });\n\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend) {\n                        legend.render();\n                    }\n                });\n            row.append('td').append('label')\n                .style('font-weight', 'normal')\n                .attr('for', radioId)\n                .text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || 'Default style';\n        renderRow(defaultName, defaultConfig, 'default');\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n'use strict';\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent) {\n    if (!(parent instanceof LocusZoom.Panel)) {\n        throw new Error('Unable to create legend, parent must be a locuszoom panel');\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + '.legend';\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: 'vertical',\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function() {\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector) {\n        this.selector = this.parent.svg.group.append('g')\n            .attr('id', this.parent.getBaseId() + '.legend').attr('class', 'lz-legend');\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect) {\n        this.background_rect = this.selector.append('rect')\n            .attr('width', 100).attr('height', 100).attr('class', 'lz-legend-background');\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group) {\n        this.elements_group = this.selector.append('g');\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element) {\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id) {\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)) {\n            this.parent.data_layers[id].layout.legend.forEach(function(element) {\n                var selector = this.elements_group.append('g')\n                    .attr('transform', 'translate(' + x + ',' + y + ')');\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size / 2) + (padding / 2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === 'line') {\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size / 4) + (padding / 2);\n                    selector.append('path').attr('class', element.class || '')\n                        .attr('d', 'M0,' + path_y + 'L' + length + ',' + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === 'rect') {\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append('rect').attr('class', element.class || '')\n                        .attr('width', width).attr('height', height)\n                        .attr('fill', element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size / Math.PI));\n                    selector.append('path').attr('class', element.class || '')\n                        .attr('d', d3.svg.symbol().size(size).type(element.shape))\n                        .attr('transform', 'translate(' + radius + ',' + (radius + (padding / 2)) + ')')\n                        .attr('fill', element.color || {})\n                        .style(element.style || {});\n                    label_x = (2 * radius) + padding;\n                    label_y = Math.max((2 * radius) + (padding / 2), label_y);\n                    line_height = Math.max(line_height, (2 * radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append('text').attr('text-anchor', 'left').attr('class', 'lz-label')\n                    .attr('x', label_x).attr('y', label_y).style({'font-size': label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === 'vertical') {\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width) {\n                        y += line_height;\n                        x = padding;\n                        selector.attr('transform', 'translate(' + x + ',' + y + ')');\n                    }\n                    x += bcr.width + (3 * padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2 * this.layout.padding);\n    this.layout.height = bcr.height + (2 * this.layout.padding);\n    this.background_rect\n        .attr('width', this.layout.width)\n        .attr('height', this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? 'hidden' : 'visible' });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function() {\n    if (!this.selector) { return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)) {\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)) {\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr('transform', 'translate(' + this.layout.origin.x + ',' + this.layout.origin.y + ')');\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function() {\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function() {\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n'use strict';\n\nfunction validateBuildSource(class_name, build, source) {\n    // Build OR Source, not both\n    if ((build && source) || !(build || source)) {\n        throw new Error(class_name + ' must specify either \"build\" or \"source\", but not both');\n    }\n    // If the build isn't recognized, our APIs can't transparently select a source to match\n    if (build && ['GRCh37', 'GRCh38'].indexOf(build) === -1) {\n        throw new Error(class_name + ' must specify a valid genome build number');\n    }\n}\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn('Warning: .addSource() is deprecated. Use .add() instead');\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    // FIXME: Some existing sites create sources with arbitrary names. This leads to subtle breakage\n    //    of namespaced fields in layouts. To avoid breaking existing usages outright, issue a deprecation warning.\n    if (ns.match(/[^A-Za-z0-9_]/)) {\n        console.warn(\"Deprecation warning: source name '\" + ns + \"' should contain only alphanumeric characters or underscores. Use of other characters may break layouts, and will be disallowed in the future.\");\n    }\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        // If passed array of source name and options, make the source\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        // Each datasource in the chain should be aware of its assigned namespace\n        dsobj.source_id = ns;\n        this.sources[ns] = dsobj;\n    } else {\n        // If passed the already-created source object\n        if (x !== null) {\n            x.source_id = ns;\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn('Warning: .getSource() is deprecated. Use .get() instead');\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn('Warning: .removeSource() is deprecated. Use .remove() instead');\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === 'string') {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field) {\n\n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n\n    if (typeof parts[3] == 'string' && parts[3].length > 1) {\n        this.transformations = parts[3].substring(1).split('|');\n        this.transformations.forEach(function(transform, i) {\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val) {\n        this.transformations.forEach(function(transform) {\n            val = transform(val);\n        });\n        return val;\n    };\n\n    // Resolve the field for a given data element.\n    // First look for a full match with transformations already applied by the data requester.\n    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n    this.resolve = function(d) {\n        if (typeof d[this.full_name] == 'undefined') {\n            var val = null;\n            if (typeof (d[this.namespace + ':' + this.name]) != 'undefined') { val = d[this.namespace + ':' + this.name]; }\n            else if (typeof d[this.name] != 'undefined') { val = d[this.name]; }\n            d[this.full_name] = this.applyTransformations(val);\n        }\n        return d[this.full_name];\n    };\n\n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || 'base';\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] == 'undefined') {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw new Error('Datasource for namespace ' + key + ' not found');\n            }\n            return sources.get(key).getData(state, requests[key].fields,\n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Q.when({header:{}, body: [], discrete: {}});\n        for(var i = 0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === 'string') {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw new Error('Source not initialized with required URL');\n    }\n\n};\n\n/**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    return this.getURL && this.getURL(state, chain, fields);\n};\n\n/**\n * Stub: build the URL for any requests made by this source.\n */\nLocusZoom.Data.Source.prototype.getURL = function(state, chain, fields) { return this.url; };\n\n/**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n * @returns {Promise}\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise('GET', url);\n};\n\n/**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== 'undefined' && cacheKey === this._cachedKey) {\n        req = Q.when(this._cachedResponse);  // Resolve to the value of the current promise\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            this._cachedKey = cacheKey;\n            this._cachedResponse = req;\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Q.when(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing, transformations, or field extraction.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources (eg, if the payload provides extra data rather than a series of records).\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\nLocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n    if (Array.isArray(data)) {\n        // Already in the desired form\n        return data;\n    }\n\n    // Otherwise, assume the server response is an object representing columns of data.\n    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n    var keys = Object.keys(data);\n    var N = data[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = data[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw new Error(this.constructor.SOURCE_NAME + ' expects a response in which all arrays of data are the same length');\n    }\n\n    // Go down the rows, and create an object for each record\n    var records = [];\n    var fields = Object.keys(data);\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j = 0; j < fields.length; j++) {\n            record[fields[j]] = data[fields[j]][i];\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.prepareData = function (records) {\n    console.warn('Warning: .prepareData() is deprecated. Use .annotateData() instead');\n    return this.annotateData(records);\n};\n\n/**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\nLocusZoom.Data.Source.prototype.annotateData = function(records, chain) {\n    // Default behavior: no transformations\n    return records;\n};\n\n/**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\nLocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n    //intended for an array of objects\n    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n    if (!Array.isArray(data)) {\n        return data;\n    }\n\n    if (!data.length) {\n        // Sometimes there are regions that just don't have data- this should not trigger a missing field error message!\n        return data;\n    }\n\n    var fieldFound = [];\n    for (var k = 0; k < fields.length; k++) {\n        fieldFound[k] = 0;\n    }\n\n    var records = data.map(function (item) {\n        var output_record = {};\n        for (var j = 0; j < fields.length; j++) {\n            var val = item[fields[j]];\n            if (typeof val != 'undefined') {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            output_record[outnames[j]] = val;\n        }\n        return output_record;\n    });\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw new Error('field ' + fields[i] + ' not found in response for ' + outnames[i]);}\n    });\n    return records;\n};\n\n/**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\nLocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    return data;\n};\n\n/**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n    if (!chain.discrete) {\n        chain.discrete = {};\n    }\n\n    if (!resp) {\n        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n        console.error(\"No usable response was returned for source: '\" + source_id + \"'. Parsing will be skipped.\");\n        return Q.when(chain);\n    }\n\n    var json = typeof resp == 'string' ? JSON.parse(resp) : resp;\n\n    var self = this;\n    // Perform the 4 steps of parsing the payload and return a combined chain object\n    return Q.when(self.normalizeResponse(json.data || json))\n        .then(function(standardized) {\n            // Perform calculations on the data from just this source\n            return Q.when(self.annotateData(standardized, chain));\n        }).then(function (data) {\n            return Q.when(self.extractFields(data, fields, outnames, trans));\n        }).then(function (one_source_body) {\n            // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n            //   fields array into account). This is useful when we want to re-use the source output in many ways.\n            chain.discrete[source_id] = one_source_body;\n            return Q.when(self.combineChainBody(one_source_body, chain, fields, outnames, trans));\n        }).then(function (new_body) {\n            return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n        });\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use');\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead');\n    return this.extractFields(data, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseData = function(data, fields, outnames, trans) {\n    console.warn('Warning: .parseData() is no longer used. A stub is provided for legacy use');\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === 'string') {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === 'function') {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'AssociationLZ');\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || 'id';\n    [id_field, 'position'].forEach(function(x) {\n        if (fields.indexOf(x) === -1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = chain.header.analysis || this.params.source || this.params.analysis;  // Old usages called this param \"analysis\"\n    if (typeof analysis == 'undefined') {\n        throw new Error('Association source must specify an analysis ID to plot');\n    }\n    return this.url + 'results/?filter=analysis in ' + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        ' and position ge ' + state.start +\n        ' and position le ' + state.end;\n};\n\nLocusZoom.Data.AssociationSource.prototype.normalizeResponse = function (data) {\n    // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n    //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n    // TODO: Consider more fine grained sorting control in the future\n    data = LocusZoom.Data.Source.prototype.normalizeResponse.call(this, data);\n    if (this.params && this.params.sort && data.length && data[0]['position']) {\n        data.sort(function (a, b) { return a['position'] - b['position']; });\n    }\n    return data;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n *\n *  This source is deprecated in favor of a new, standalone LD server. For new usages, see LDLZ2.\n *\n * @class\n * @deprecated\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, 'LDLZ');\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length > 1) {\n        if (fields.length !== 2 || fields.indexOf('isrefvar') === -1) {\n            throw new Error('LD does not know how to get all fields: ' + fields.join(', '));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // Find the fields (as provided by a previous step in the chain) that are needed to combine with LD data\n\n    // Since LD information may be shared across multiple assoc sources with different namespaces,\n    //   we use regex to find columns to join on, rather than requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i = 0; i < regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length) {\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length > 0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    // Assumption: all usages of this source will only ever ask for \"isrefvar\" or \"state\". This maps to output names.\n    var obj = {};\n    for(var i = 0; i < fields.length; i++) {\n        if(fields[i] === 'isrefvar') {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) { return data; };\n\n\nLocusZoom.Data.LDSource.prototype.getRefvar = function (state, chain, fields) {\n    var findExtremeValue = function(x, pval, sign) {\n        pval = pval || 'pvalue';\n        sign = sign || 1;\n        var extremeVal = x[0][pval], extremeIdx = 0;\n        for(var i = 1; i < x.length; i++) {\n            if (x[i][pval] * sign > extremeVal) {\n                extremeVal = x[i][pval] * sign;\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === 'state') {\n        refVar = state.ldrefvar || chain.header.ldrefvar || 'best';\n    }\n    if (refVar === 'best') {\n        if (!chain.body) {\n            throw new Error('No association data found to find best pvalue');\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = '';\n            if (!keys.id) { columns += (columns.length ? ', ' : '') + 'id'; }\n            if (!keys.pvalue) { columns += (columns.length ? ', ' : '') + 'pvalue'; }\n            throw new Error('Unable to find necessary column(s) for merge: ' + columns + ' (available: ' + keys._names_ + ')');\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    return refVar;\n};\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var refVar = this.getRefvar(state, chain, fields);\n    chain.header.ldrefvar = refVar;\n    return this.url + 'results/?filter=reference eq ' + refSource +\n        \" and chromosome2 eq '\" + state.chr + \"'\" +\n        ' and position2 ge ' + state.start +\n        ' and position2 le ' + state.end +\n        \" and variant1 eq '\" + refVar + \"'\" +\n        '&fields=chr,pos,rsquare';\n};\n\nLocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw new Error('Unable to find position field for merge: ' + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i = 0, j = 0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outrefname, outldname) {\n        for(var i = 0; i < data.length; i++) {\n            if (data[i][idfield] && data[i][idfield] === refvar) {\n                data[i][outrefname] = 1;\n                data[i][outldname] = 1; // For label/filter purposes, implicitly mark the ref var as LD=1 to itself\n            } else {\n                data[i][outrefname] = 0;\n            }\n        }\n    };\n\n    // LD servers vary slightly. Some report corr as \"rsquare\", others as \"correlation\"\n    var corrField = data.rsquare ? 'rsquare' : 'correlation';\n    leftJoin(chain.body, data, reqFields.ldout, corrField);\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout, reqFields.ldout);\n    }\n    return chain.body;\n};\n\n/**\n * Fetch LD directly from the standalone Portal LD server\n *\n * @class\n * @public\n * @augments LocusZoom.Data.LDSource\n */\nLocusZoom.Data.LDSource2 = LocusZoom.KnownDataSources.extend('LDLZ', 'LDLZ2', {\n    getURL: function(state, chain, fields) {\n        // Accept the following params in this.params:\n        // - method (r, rsquare, cov)\n        // - source (aka panel)\n        // - population (ALL, AFR, EUR, etc)\n        // - build\n        // The LD source/pop can be overridden from plot.state for dynamic layouts\n        var build = state.genome_build || this.params.build || 'GRCh37';\n        var source = state.ld_source || this.params.source || '1000G';\n        var population = state.ld_pop || this.params.population || 'ALL';  // LDServer panels will always have an ALL\n        var method = this.params.method || 'rsquare';\n\n        validateBuildSource(this.constructor.SOURCE_NAME, build, null);  // LD doesn't need to validate `source` option\n\n        var refVar = this.getRefvar(state, chain, fields);\n        chain.header.ldrefvar = refVar;\n\n        return  [\n            this.url, 'genome_builds/', build, '/references/', source, '/populations/', population, '/variants',\n            '?correlation=', method,\n            '&variant=', encodeURIComponent(refVar),\n            '&chrom=', encodeURIComponent(state.chr),\n            '&start=', encodeURIComponent(state.start),\n            '&stop=', encodeURIComponent(state.end)\n        ].join('');\n    },\n    fetchRequest: function(state, chain, fields) {\n        // The API is paginated, but we need all of the data to render a plot. Depaginate and combine where appropriate.\n        var url = this.getURL(state, chain, fields);\n        var combined = { data: {} };\n        var chainRequests = function (url) {\n            return LocusZoom.createCORSPromise('GET', url)\n                .then(function(payload) {\n                    payload = JSON.parse(payload);\n                    Object.keys(payload.data).forEach(function (key) {\n                        combined.data[key] = (combined.data[key] || []).concat(payload.data[key]);\n                    });\n                    if (payload.next) {\n                        return chainRequests(payload.next);\n                    }\n                    return combined;\n                });\n        };\n\n        return chainRequests(url);\n    }\n});\n\n/**\n * Data source for GWAS catalogs of known variants\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object|String} init Configuration (URL or object)\n * @param {Object} [init.params] Optional configuration parameters\n * @param {Number} [init.params.source=2] The ID of the chosen catalog. Defaults to EBI GWAS catalog, GRCh37\n * @param {('strict'|'loose')} [init.params.match_type='strict'] Whether to match on exact variant, or just position.\n */\nLocusZoom.Data.GwasCatalog = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, 'GwasCatalogLZ');\n\nLocusZoom.Data.GwasCatalog.prototype.getURL = function(state, chain, fields) {\n    // This is intended to be aligned with another source- we will assume they are always ordered by position, asc\n    //  (regardless of the actual match field)\n    var build_option = state.genome_build || this.params.build;\n    validateBuildSource(this.constructor.SOURCE_NAME, build_option, null); // Source can override build- not mutually exclusive\n\n    // Most of our annotations will respect genome build before any other option.\n    //   But there can be more than one GWAS catalog for the same build, so an explicit config option will always take\n    //   precedence.\n    var default_source = (build_option === 'GRCh38') ? 1 : 2;  // EBI GWAS catalog\n    var source = this.params.source || default_source;\n    return this.url + '?format=objects&sort=pos&filter=id eq ' + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        ' and pos ge ' + state.start +\n        ' and pos le ' + state.end;\n};\n\nLocusZoom.Data.GwasCatalog.prototype.findMergeFields = function (records) {\n    // Data from previous sources is already namespaced. Find the alignment field by matching.\n    var knownFields = Object.keys(records);\n    // Note: All API endoints involved only give results for 1 chromosome at a time; match is implied\n    var posMatch = knownFields.find(function (item) { return item.match(/\\b(position|pos)\\b/i); });\n\n    if (!posMatch) {\n        throw new Error('Could not find data to align with GWAS catalog results');\n    }\n    return { 'pos': posMatch };\n};\n\n// Skip the \"individual field extraction\" step; extraction will be handled when building chain body instead\nLocusZoom.Data.GwasCatalog.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\nLocusZoom.Data.GwasCatalog.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    if (!data.length) {\n        return chain.body;\n    }\n\n    var decider = 'log_pvalue'; //  TODO: Better reuse options in the future\n    var decider_out = outnames[fields.indexOf(decider)];\n\n    function leftJoin(left, right, fields, outnames, trans) { // Add `fields` from `right` to `left`\n        // Add a synthetic, un-namespaced field to all matching records\n        var n_matches = left['n_catalog_matches'] || 0;\n        left['n_catalog_matches'] = n_matches + 1;\n        if (decider && left[decider_out] && left[decider_out] > right[decider]) {\n            // There may be more than one GWAS catalog entry for the same SNP. This source is intended for a 1:1\n            //  annotation scenario, so for now it only joins the catalog entry that has the best -log10 pvalue\n            return;\n        }\n\n        for (var j = 0; j < fields.length; j++) {\n            var fn = fields[j];\n            var outn = outnames[j];\n\n            var val = right[fn];\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            left[outn] = val;\n        }\n    }\n\n    var chainNames = this.findMergeFields(chain.body[0]);\n    var catNames = this.findMergeFields(data[0]);\n\n    var i = 0, j = 0;\n    while (i < chain.body.length && j < data.length) {\n        var left = chain.body[i];\n        var right = data[j];\n\n        if (left[chainNames.pos] === right[catNames.pos]) {\n            // There may be multiple catalog entries for each matching SNP; evaluate match one at a time\n            leftJoin(left, right, fields, outnames, trans);\n            j += 1;\n        } else if (left[chainNames.pos] < right[catNames.pos]) {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    return chain.body;\n};\n\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'GeneLZ');\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var build = state.genome_build || this.params.build;\n    var source = this.params.source;\n    validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n    if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n        source = (build === 'GRCh38') ? 1 : 3;\n    }\n    return this.url + '?filter=source in ' + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        ' and start le ' + state.end +\n        ' and end ge ' + state.start;\n};\n\n// Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n// exact information returned by the API. (ignoring the fields array in the layout)\nLocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) { return data; };\nLocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'GeneConstraintLZ');\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var geneids = [];\n    chain.body.forEach(function(gene) {\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf('.')) {\n            gene_id = gene_id.substr(0, gene_id.indexOf('.'));\n        }\n        geneids.push(gene_id);\n    });\n    var url = this.getURL(state, chain, fields);\n    var body = 'geneids=' + encodeURIComponent(JSON.stringify(geneids));\n    var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    return LocusZoom.createCORSPromise('POST', url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames, trans) {\n    if (!data) {\n        return chain;\n    }\n    var constraint_fields = ['bp', 'exp_lof', 'exp_mis', 'exp_syn', 'lof_z', 'mis_z', 'mu_lof', 'mu_mis','mu_syn', 'n_exons', 'n_lof', 'n_mis', 'n_syn', 'pLI', 'syn_z'];\n    chain.body.forEach(function(gene, i) {\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf('.')) {\n            gene_id = gene_id.substr(0, gene_id.indexOf('.'));\n        }\n        constraint_fields.forEach(function(field) {\n            // Do not overwrite any fields defined in the original gene source\n            if (typeof chain.body[i][field] != 'undefined') { return; }\n            if (data[gene_id]) {\n                var val = data[gene_id][field];\n                if (typeof val == 'number' && val.toString().indexOf('.') !== -1) {\n                    val = parseFloat(val.toFixed(2));\n                }\n                chain.body[i][field] = val;\n            } else {\n                // If the gene did not come back in the response then set the same field with a null values\n                chain.body[i][field] = null;\n            }\n        });\n    });\n    return chain.body;\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'RecombLZ');\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var build = state.genome_build || this.params.build;\n    var source = this.params.source;\n    validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n    if (build) { // If build specified, choose a known Portal API dataset IDs (build 37/38)\n        source = (build === 'GRCh38') ? 16 : 15;\n    }\n    return this.url + '?filter=id in ' + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        ' and position le ' + state.end +\n        ' and position ge ' + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'IntervalLZ');\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = chain.header.bedtracksource || this.params.source;\n    return this.url + '?filter=id in ' + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        ' and start le ' + state.end +\n        ' and end ge ' + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},'StaticJSON');\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Q.fcall(function() {return this._data;}.bind(this));\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.params.build This datasource expects to be provided the name of the genome build that will\n *   be used to provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, 'PheWASLZ');\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = (state.genome_build ? [state.genome_build] : null) || this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw new Error(['Data source', this.constructor.SOURCE_NAME, 'requires that you specify array of one or more desired genome build names'].join(' '));\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return 'build=' + encodeURIComponent(item);}).join('&')\n    ];\n    return url.join('');\n};\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nLocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function(init) {\n    if (!init || !init.sources) {\n        throw new Error('Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs');\n    }\n\n    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n    this._source_name_mapping = init.sources;\n\n    // Validate that this source has been told how to find the required information\n    var specified_ids = Object.keys(init.sources);\n    var self = this;\n    this.REQUIRED_SOURCES.forEach(function (k) {\n        if (specified_ids.indexOf(k) === -1) {\n            throw new Error('Configuration for ' + self.constructor.SOURCE_NAME + ' must specify a source ID corresponding to ' + k);\n        }\n    });\n    this.parseInit(init);\n}, 'ConnectorSource');\n\n/** @property {String[]} Specifies the sources that must be provided in the original config object */\nLocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n\nLocusZoom.Data.ConnectorSource.prototype.parseInit = function(init) {};  // Stub\n\nLocusZoom.Data.ConnectorSource.prototype.getRequest = function(state, chain, fields) {\n    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n    var self = this;\n    Object.keys(this._source_name_mapping).forEach(function(ns) {\n        var chain_source_id = self._source_name_mapping[ns];\n        if (chain.discrete && !chain.discrete[chain_source_id]) {\n            throw new Error(self.constructor.SOURCE_NAME + ' cannot be used before loading required data for: ' + chain_source_id);\n        }\n    });\n    return Q.when(chain.body || []);\n};\n\nLocusZoom.Data.ConnectorSource.prototype.parseResponse = function(data, chain, fields, outnames, trans) {\n    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n    // Typically connectors are called with `connector_name:all` in the fields array.\n    return Q.when(this.combineChainBody(data, chain, fields, outnames, trans))\n        .then(function(new_body) {\n            return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n        });\n};\n\nLocusZoom.Data.ConnectorSource.prototype.combineChainBody = function(records, chain) {\n    // Stub method: specifies how to combine the data\n    throw new Error('This method must be implemented in a subclass');\n};\n","/* global LocusZoom */\n'use strict';\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function() {\n        this.panel_ids_by_y_index.forEach(function(pid, idx) {\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function() {\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == 'undefined') {\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get('plot', 'standard_association'));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        'layout_changed': [],\n        'data_requested': [],\n        'data_rendered': [],\n        'element_clicked': [], // Select or unselect\n        'element_selection': [], // Element becomes active (only)\n        'panel_removed': [],\n        'state_changed': []  // Only triggered when a state change causes rerender\n    };\n\n    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook) {\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('Unable to register event hook, invalid event: ' + event.toString());\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error('Unable to remove event hook, invalid event: ' + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('LocusZoom attempted to throw an invalid event: ' + event.toString());\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            var eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function() {\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null) {\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style('position') !== 'static') {\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function() {\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null) {\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id) {\n        panel_id = panel_id || null;\n        if (panel_id) {\n            return ((typeof this.interaction.panel_id == 'undefined' || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false, // Allowed values: false, \"width_only\", \"both\" (synonym for true)\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension) {\n    if (dimension !== 'height' && dimension !== 'width') {\n        throw new Error('Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional');\n    }\n    var total = 0;\n    for (var id in this.panels) {\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout['proportional_' + dimension]) {\n            this.panels[id].layout['proportional_' + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout['proportional_' + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function() {\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function() {\n\n    // Sanity check layout values\n    if (isNaN(this.layout.width) || this.layout.width <= 0) {\n        throw new Error('Plot layout parameter `width` must be a positive number');\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0) {\n        throw new Error('Plot layout parameter `width` must be a positive number');\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0) {\n        throw new Error('Plot layout parameter `aspect_ratio` must be a positive number');\n    }\n    if (this.layout.responsive_resize === true) {\n        // Backwards compatible support\n        console.warn('\"responsive_resize\" should specify a mode, not a boolean');\n        this.layout.responsive_resize = 'both';\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize) {\n        this.window_onresize = d3.select(window).on('resize.lz-' + this.id, function() {\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on('load.lz-' + this.id, function() {\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout) {\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height) {\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels) {\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0) {\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        'min-width': this.layout.min_width + 'px',\n        'min-height': this.layout.min_height + 'px'\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize) {\n            // All resize modes will affect width\n            if (this.svg) {\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n\n            if (this.layout.responsive_resize === 'both') { // Then also change the height\n                this.layout.height = this.layout.width / this.layout.aspect_ratio;\n                if (this.layout.height < this.layout.min_height) {\n                    this.layout.height = this.layout.min_height;\n                    this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n                }\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id) {\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels) {\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null) {\n        if (this.layout.responsive_resize === 'both') {\n            this.svg\n                .attr('viewBox', '0 0 ' + this.layout.width + ' ' + this.layout.height)\n                .attr('preserveAspectRatio', 'xMinYMin meet');\n        } else {\n            this.svg.attr('width', this.layout.width).attr('height', this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized) {\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit('layout_changed');\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout) {\n\n    // Sanity checks\n    if (typeof layout !== 'object') {\n        throw new Error('Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()');\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0) {\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0) {\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx) {\n        if (panel_layout.id === panel.id) { layout_idx = idx; }\n    });\n    if (layout_idx === null) {\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized) {\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || 'wipe';\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid) {\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete self.layout.state[pid + '.' + dlid];\n            if(mode === 'reset') {\n                layer.setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id) {\n    if (!this.panels[id]) {\n        throw new Error('Unable to remove panel, ID not found: ' + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container) {\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx) {\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized) {\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    this.emit('panel_removed', id);\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function() {\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels) {\n        if (this.panels[id].layout.proportional_height === null) {\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null) {\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked) {\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional('height');\n    if (!total_proportional_height) {\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels) {\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked) {\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id) {\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function() {\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize) {\n        d3.select(this.container).classed('lz-container-responsive', true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append('g')\n            .attr('class', 'lz-mouse_guide').attr('id', this.id + '.mouse_guide');\n        var mouse_guide_vertical_svg = mouse_guide_svg.append('rect')\n            .attr('class', 'lz-mouse_guide-vertical').attr('x',-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append('rect')\n            .attr('class', 'lz-mouse_guide-horizontal').attr('y',-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function() {\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing) {\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx) {\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                        .attr('class', 'lz-panel-boundary')\n                        .attr('title', 'Resize panel');\n                    selector.append('span');\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on('dragstart', function() { this.dragging = true; }.bind(this));\n                    panel_resize_drag.on('dragend', function() { this.dragging = false; }.bind(this));\n                    panel_resize_drag.on('drag', function() {\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx) {\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx) {\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                    .attr('class', 'lz-panel-corner-boundary')\n                    .attr('title', 'Resize plot');\n                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-outer');\n                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-inner');\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on('dragstart', function() { this.dragging = true; }.bind(this));\n                corner_drag.on('dragend', function() { this.dragging = false; }.bind(this));\n                corner_drag.on('drag', function() {\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function() {\n            if (!this.showing) { return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx) {\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + 'px',\n                    left: left + 'px',\n                    width: width + 'px'\n                });\n                selector.select('span').style({\n                    width: width + 'px'\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + 'px',\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + 'px'\n            });\n            return this;\n        },\n        hide: function() {\n            if (!this.showing) { return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector) { selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries) {\n        d3.select(this.svg.node().parentNode).on('mouseover.' + this.id + '.panel_boundaries', function() {\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on('mouseout.' + this.id + '.panel_boundaries', function() {\n            this.panel_boundaries.hide_timeout = setTimeout(function() {\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels) {\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = '.' + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function() {\n            this.mouse_guide.vertical.attr('x', -1);\n            this.mouse_guide.horizontal.attr('y', -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function() {\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr('x', coords[0]);\n            this.mouse_guide.horizontal.attr('y', coords[1]);\n        }.bind(this);\n        this.svg\n            .on('mouseout' + namespace + '-mouse_guide', mouseout_mouse_guide)\n            .on('touchleave' + namespace + '-mouse_guide', mouseout_mouse_guide)\n            .on('mousemove' + namespace + '-mouse_guide', mousemove_mouse_guide);\n    }\n    var mouseup = function() {\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function() {\n        if (this.interaction.dragging) {\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event) { d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id) {\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on('mouseup' + namespace, mouseup)\n        .on('touchend' + namespace, mouseup)\n        .on('mousemove' + namespace, mousemove)\n        .on('touchmove' + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select('body').empty()) {\n        d3.select('body')\n            .on('mouseup' + namespace, mouseup)\n            .on('touchend' + namespace, mouseup);\n    }\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function() {\n    return this.applyState();\n};\n\n\n/**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n\n/**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n\n/**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\nLocusZoom.Plot.prototype.subscribeToData = function(fields, success_callback, opts) {\n    opts = opts || {};\n\n    // Register an event listener that is notified whenever new data has been rendered\n    var error_callback = opts.onerror || function(err) {\n        console.log('An error occurred while acting on an external callback', err);\n    };\n    var self = this;\n\n    var listener = function() {\n        try {\n            self.lzd.getData(self.state, fields)\n                .then(function (new_data) {\n                    success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                }).catch(error_callback);\n        } catch (error) {\n            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n            error_callback(error);\n        }\n    };\n    this.on('data_rendered', listener);\n    return listener;\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes) {\n    state_changes = state_changes || {};\n    if (typeof state_changes != 'object') {\n        throw new Error('LocusZoom.applyState only accepts an object; ' + (typeof state_changes) + ' given');\n    }\n\n    // First make a copy of the current (old) state to work with\n    var new_state = JSON.parse(JSON.stringify(this.state));\n\n    // Apply changes by top-level property to the new state\n    for (var property in state_changes) {\n        new_state[property] = state_changes[property];\n    }\n\n    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n    new_state = LocusZoom.validateState(new_state, this.layout);\n\n    // Apply new state to the actual state\n    for (property in new_state) {\n        this.state[property] = new_state[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit('data_requested');\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels) {\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Q.all(this.remap_promises)\n        .catch(function(error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function() {\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id) {\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id) {\n                    var data_layer = this.data_layers[data_layer_id];\n                    var state_id = panel_id + '.' + data_layer_id;\n                    for (var property in this.state[state_id]) {\n                        if (!this.state[state_id].hasOwnProperty(property)) { continue; }\n                        if (Array.isArray(this.state[state_id][property])) {\n                            this.state[state_id][property].forEach(function(element_id) {\n                                try {\n                                    this.setElementStatus(property, this.getElementById(element_id), true);\n                                } catch (e) {\n                                    console.warn('Unable to apply state: ' + state_id + ', ' + property);\n                                    console.error(e);\n                                }\n                            }.bind(data_layer));\n                        }\n                    }\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit('layout_changed');\n            this.emit('data_rendered');\n            this.emit('state_changed', state_changes);\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method) {\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method) {\n    case 'background':\n    case 'x_tick':\n        axis = 'x';\n        break;\n    case 'y1_tick':\n        axis = 'y1';\n        break;\n    case 'y2_tick':\n        axis = 'y2';\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()) { return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style('cursor', 'all-scroll');\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function() {\n\n    if (!this.interaction.dragging) { return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != 'object') {\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent) {\n        panel.data_layer_ids_by_z_index.forEach(function(id) {\n            if (panel.data_layers[id].layout[axis + '_axis'].axis === axis_number) {\n                panel.data_layers[id].layout[axis + '_axis'].floor = extent[0];\n                panel.data_layers[id].layout[axis + '_axis'].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis + '_axis'].lower_buffer;\n                delete panel.data_layers[id].layout[axis + '_axis'].upper_buffer;\n                delete panel.data_layers[id].layout[axis + '_axis'].min_extent;\n                delete panel.data_layers[id].layout[axis + '_axis'].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method) {\n    case 'background':\n    case 'x_tick':\n        if (this.interaction.dragging.dragged_x !== 0) {\n            overrideAxisLayout('x', 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case 'y1_tick':\n    case 'y2_tick':\n        if (this.interaction.dragging.dragged_y !== 0) {\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout('y', y_axis_number, panel['y' + y_axis_number + '_extent']);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style('cursor', null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n'use strict';\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== 'object') {\n        throw new Error('Unable to create panel, invalid layout');\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== 'string' || !layout.id.length) {\n        if (!this.parent) {\n            layout.id = 'p' + Math.floor(Math.random() * Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function() {\n                id = 'p' + Math.floor(Math.random() * Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != 'undefined') {\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== 'undefined') {\n            throw new Error('Cannot create panel with id [' + layout.id + ']; panel with that id already exists');\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent) {\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function() {\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx) {\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function() {\n        return this.parent.id + '.' + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        'layout_changed': [],\n        'data_requested': [],\n        'data_rendered': [],\n        'element_clicked': [],\n        'element_selection': []\n    };\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook) {\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('Unable to register event hook, invalid event: ' + event.toString());\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error('Unable to remove event hook, invalid event: ' + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n            throw new Error('LocusZoom attempted to throw an invalid event: ' + event.toString());\n        }\n        if (typeof eventData === 'boolean' && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        var eventContext = {sourceID: sourceID, data: eventData || null};\n        this.event_hooks[event].forEach(function(hookToRun) {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function() {\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: '', style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: 'clear_selections',\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function() {\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null) {\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null) {\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0) {\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render === false) {\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout) {\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height) {\n    if (typeof width != 'undefined' && typeof height != 'undefined') {\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null) {\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null) {\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect) {\n        this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n    }\n    if (this.initialized) {\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend) { this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y) {\n    if (!isNaN(x) && x >= 0) { this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0) { this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized) { this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left) {\n    var extra;\n    if (!isNaN(top)    && top    >= 0) { this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0) { this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0) { this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0) { this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height) {\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width) {\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    ['top', 'right', 'bottom', 'left'].forEach(function(m) {\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized) { this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title) {\n    if (typeof this.layout.title == 'string') {\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == 'string') {\n        this.layout.title.text = title;\n    } else if (typeof title == 'object' && title !== null) {\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length) {\n        this.title.attr('display', null)\n            .attr('x', parseFloat(this.layout.title.x))\n            .attr('y', parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr('display', 'none');\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function() {\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append('g')\n        .attr('id', this.getBaseId() + '.panel_container')\n        .attr('transform', 'translate(' + (this.layout.origin.x || 0) + ',' + (this.layout.origin.y || 0) + ')');\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append('clipPath')\n        .attr('id', this.getBaseId() + '.clip');\n    this.svg.clipRect = clipPath.append('rect')\n        .attr('width', this.layout.width).attr('height', this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append('g')\n        .attr('id', this.getBaseId() + '.panel')\n        .attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append('rect')\n        .attr('class', 'lz-panel-background')\n        .on('click', function() {\n            if (this.layout.background_click === 'clear_selections') { this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append('text').attr('class', 'lz-panel-title');\n    if (typeof this.layout.title != 'undefined') { this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.x_axis').attr('class', 'lz-x lz-axis');\n    if (this.layout.axes.x.render) {\n        this.svg.x_axis_label = this.svg.x_axis.append('text')\n            .attr('class', 'lz-x lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n    this.svg.y1_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.y1_axis').attr('class', 'lz-y lz-y1 lz-axis');\n    if (this.layout.axes.y1.render) {\n        this.svg.y1_axis_label = this.svg.y1_axis.append('text')\n            .attr('class', 'lz-y1 lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n    this.svg.y2_axis = this.svg.group.append('g')\n        .attr('id', this.getBaseId() + '.y2_axis').attr('class', 'lz-y lz-y2 lz-axis');\n    if (this.layout.axes.y2.render) {\n        this.svg.y2_axis_label = this.svg.y2_axis.append('text')\n            .attr('class', 'lz-y2 lz-axis lz-label')\n            .attr('text-anchor', 'middle');\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend) {\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan) {\n        var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n        var mousedown = function() {\n            this.parent.startDrag(this, 'background');\n        }.bind(this);\n        this.svg.container.select('.lz-panel-background')\n            .on('mousedown' + namespace + '.background', mousedown)\n            .on('touchstart' + namespace + '.background', mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function() {\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll('g.lz-data_layer-container').data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis) {\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if (['x','y1','y2'].indexOf(axis) === -1) { return linked_panel_ids; }\n    if (!this.layout.interaction[axis + '_linked']) { return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id) {\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + '_linked']) {\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function() {\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]) {\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function() {\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]) {\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout) {\n\n    // Sanity checks\n    if (typeof layout !== 'object' || typeof layout.id !== 'string' || !layout.id.length) {\n        throw new Error('Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()');\n    }\n    if (typeof this.data_layers[layout.id] !== 'undefined') {\n        throw new Error('Cannot create data_layer with id [' + layout.id + ']; data layer with that id already exists in the panel');\n    }\n    if (typeof layout.type !== 'string') {\n        throw new Error('Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()');\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == 'object' && (typeof layout.y_axis.axis == 'undefined' || [1,2].indexOf(layout.y_axis.axis) === -1)) {\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0) {\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0) {\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx) {\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx) {\n        if (data_layer_layout.id === data_layer.id) { layout_idx = idx; }\n    });\n    if (layout_idx === null) {\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id) {\n    if (!this.data_layers[id]) {\n        throw new Error('Unable to remove data layer, ID not found: ' + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container) {\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx) {\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function() {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setAllElementStatus('selected', false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function() {\n    this.emit('data_requested');\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers) {\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n        }\n    }\n    // When all finished trigger a render\n    return Q.all(this.data_promises)\n        .then(function() {\n            this.initialized = true;\n            this.render();\n            this.emit('layout_changed', true);\n            this.emit('data_rendered');\n        }.bind(this))\n        .catch(function(error) {\n            console.error(error);\n            this.curtain.show(error.message || error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function() {\n\n    // Reset extents\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        this[axis + '_extent'] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers) {\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled) {\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent('x')));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled) {\n            var y_axis = 'y' + data_layer.layout.y_axis.axis;\n            this[y_axis + '_extent'] = d3.extent((this[y_axis + '_extent'] || []).concat(data_layer.getAxisExtent('y')));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === 'state') {\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis) {\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks) {\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)) {\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === 'object') {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + '_extent']) {\n        return LocusZoom.prettyTicks(this[axis + '_extent'], 'both');\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function() {\n\n    // Position the panel container\n    this.svg.container.attr('transform', 'translate(' + this.layout.origin.x +  ',' + this.layout.origin.y + ')');\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr('x', this.layout.margin.left).attr('y', this.layout.margin.top)\n        .attr('width', this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr('height', this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border) {\n        this.inner_border.style({ 'stroke-width': 1, 'stroke': this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent) {\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity) { value = pos_max; }\n        if (value === -Infinity) { value = neg_min; }\n        if (value === 0) { value = pos_min; }\n        if (value > 0) { value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0) { value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent) {\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range) {\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent) {\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range) {\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent) {\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range) {\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)) {\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == 'function') {\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)) {\n                zoom_factor = 1 / (Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)) {\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging) {\n            switch (this.parent.interaction.dragging.method) {\n            case 'background':\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case 'x_tick':\n                if (d3.event && d3.event.shiftKey) {\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case 'y1_tick':\n            case 'y2_tick':\n                var y_shifted = 'y' + this.parent.interaction.dragging.method[1] + '_shifted';\n                if (d3.event && d3.event.shiftKey) {\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (!this[axis + '_extent']) { return; }\n\n        // Base Scale\n        this[axis + '_scale'] = d3.scale.linear()\n            .domain(this[axis + '_extent'])\n            .range(ranges[axis + '_shifted']);\n\n        // Shift the extent\n        this[axis + '_extent'] = [\n            this[axis + '_scale'].invert(ranges[axis][0]),\n            this[axis + '_scale'].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + '_scale'] = d3.scale.linear()\n            .domain(this[axis + '_extent']).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom) {\n        var zoom_handler = function() {\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey) {\n                if (this.parent.canInteract(this.id)) {\n                    this.loader.show('Press <tt>[SHIFT]</tt> while scrolling to zoom').hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)) { return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0) { return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds('x'),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id) {\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null) { clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function() {\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on('wheel.zoom', zoom_handler)\n            .on('mousewheel.zoom', zoom_handler)\n            .on('DOMMouseScroll.zoom', zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id) {\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis) {\n\n    if (['x', 'y1', 'y2'].indexOf(axis) === -1) {\n        throw new Error('Unable to render axis; invalid axis identifier: ' + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + '_scale'] == 'function'\n        && !isNaN(this[axis + '_scale'](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis + '_axis']) {\n        this.svg.container.select('g.lz-axis.lz-' + axis).style('display', canRender ? null : 'none');\n    }\n\n    if (!canRender) { return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: 'translate(' + this.layout.margin.left + ',' + (this.layout.height - this.layout.margin.bottom) + ')',\n            orientation: 'bottom',\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: 'translate(' + this.layout.margin.left + ',' + this.layout.margin.top + ')',\n            orientation: 'left',\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: 'translate(' + (this.layout.width - this.layout.margin.right) + ',' + this.layout.margin.top + ')',\n            orientation: 'right',\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + '_ticks'] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks) {\n        for (var i = 0; i < ticks.length; i++) {\n            if (isNaN(ticks[i])) {\n                return false;\n            }\n        }\n        return true;\n    })(this[axis + '_ticks']);\n\n    // Initialize the axis; set scale and orientation\n    this[axis + '_axis'] = d3.svg.axis().scale(this[axis + '_scale']).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers) {\n        this[axis + '_axis'].tickValues(this[axis + '_ticks']);\n        if (this.layout.axes[axis].tick_format === 'region') {\n            this[axis + '_axis'].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis + '_ticks'].map(function(t) {\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis + '_axis'].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis + '_ticks'][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis + '_axis']\n        .attr('transform', axis_params[axis].position)\n        .call(this[axis + '_axis']);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers) {\n        var tick_selector = d3.selectAll('g#' + this.getBaseId().replace('.','\\\\.') + '\\\\.' + axis + '_axis g.tick');\n        var panel = this;\n        tick_selector.each(function(d, i) {\n            var selector = d3.select(this).select('text');\n            if (panel[axis + '_ticks'][i].style) {\n                selector.style(panel[axis + '_ticks'][i].style);\n            }\n            if (panel[axis + '_ticks'][i].transform) {\n                selector.attr('transform', panel[axis + '_ticks'][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null) {\n        this.svg[axis + '_axis_label']\n            .attr('x', axis_params[axis].label_x).attr('y', axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null) {\n            this.svg[axis + '_axis_label']\n                .attr('transform', 'rotate(' + axis_params[axis].label_rotate + ' ' + axis_params[axis].label_x + ',' + axis_params[axis].label_y + ')');\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    ['x', 'y1', 'y2'].forEach(function(axis) {\n        if (this.layout.interaction['drag_' + axis + '_ticks_to_scale']) {\n            var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n            var tick_mouseover = function() {\n                if (typeof d3.select(this).node().focus == 'function') { d3.select(this).node().focus(); }\n                var cursor = (axis === 'x') ? 'ew-resize' : 'ns-resize';\n                if (d3.event && d3.event.shiftKey) { cursor = 'move'; }\n                d3.select(this)\n                    .style({'font-weight': 'bold', 'cursor': cursor})\n                    .on('keydown' + namespace, tick_mouseover)\n                    .on('keyup' + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll('.lz-axis.lz-' + axis + ' .tick text')\n                .attr('tabindex', 0) // necessary to make the tick focusable so keypress events can be captured\n                .on('mouseover' + namespace, tick_mouseover)\n                .on('mouseout' + namespace,  function() {\n                    d3.select(this).style({'font-weight': 'normal'});\n                    d3.select(this).on('keydown' + namespace, null).on('keyup' + namespace, null);\n                })\n                .on('mousedown' + namespace, function() {\n                    this.parent.startDrag(this, axis + '_tick');\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height) {\n    target_height = +target_height || null;\n    if (target_height === null) {\n        this.data_layer_ids_by_z_index.forEach(function(id) {\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh) {\n                if (target_height === null) { target_height = +dh; }\n                else { target_height = Math.max(target_height, +dh); }\n            }\n        }.bind(this));\n    }\n    if (+target_height) {\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id) {\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive) {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle) {\n    this.data_layer_ids_by_z_index.forEach(function(id) {\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx) {\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = 'un' + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + 'ElementsByFilters'] = function(filters, exclusive) {\n        if (typeof exclusive == 'undefined') { exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + 'AllElements'] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately) {\n    if (typeof show_immediately != 'undefined') { show_immediately = true; }\n    if (show_immediately) {\n        this.loader.show('Loading...').animate();\n    }\n    this.on('data_requested', function() {\n        this.loader.show('Loading...').animate();\n    }.bind(this));\n    this.on('data_rendered', function() {\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}